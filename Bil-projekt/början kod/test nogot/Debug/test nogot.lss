
test nogot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000352  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001036  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0f  00000000  00000000  0000149a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000560  00000000  00000000  00001fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  0000250c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d8  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b9  00000000  00000000  00002be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002e99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	60 01       	movw	r12, r0

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 30       	cpi	r26, 0x08	; 8
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	c5 e3       	ldi	r28, 0x35	; 53
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
  8e:	21 97       	sbiw	r28, 0x01	; 1
  90:	fe 01       	movw	r30, r28
  92:	0e 94 67 01 	call	0x2ce	; 0x2ce <__tablejump2__>
  96:	c4 33       	cpi	r28, 0x34	; 52
  98:	d1 07       	cpc	r29, r17
  9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
  9c:	0e 94 24 01 	call	0x248	; 0x248 <main>
  a0:	0c 94 6d 01 	jmp	0x2da	; 0x2da <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <_ZN8ActuatorC1Eh>:
#include "GPIO.h"

Actuator::Actuator(const uint8_t PIN)
  a8:	fc 01       	movw	r30, r24

#ifndef GPIO_H_
#define GPIO_H_
#include "definitions.h"

class GPIO
  aa:	10 82       	st	Z, r1
  ac:	12 82       	std	Z+2, r1	; 0x02
  ae:	11 82       	std	Z+1, r1	; 0x01
  b0:	13 82       	std	Z+3, r1	; 0x03
{
	if(PIN >=0 && PIN <= 7)
  b2:	68 30       	cpi	r22, 0x08	; 8
  b4:	80 f4       	brcc	.+32     	; 0xd6 <_ZN8ActuatorC1Eh+0x2e>
	{
		this->io_port = IO_port::D;
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	92 83       	std	Z+2, r25	; 0x02
  bc:	81 83       	std	Z+1, r24	; 0x01
		this->PIN = PIN;
  be:	60 83       	st	Z, r22
		SET(DDRD, this->PIN);
  c0:	2a b1       	in	r18, 0x0a	; 10
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <_ZN8ActuatorC1Eh+0x24>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <_ZN8ActuatorC1Eh+0x20>
  d0:	82 2b       	or	r24, r18
  d2:	8a b9       	out	0x0a, r24	; 10
  d4:	08 95       	ret
	}
	else if (PIN >= 8 && PIN <= 13)
  d6:	68 50       	subi	r22, 0x08	; 8
  d8:	66 30       	cpi	r22, 0x06	; 6
  da:	68 f4       	brcc	.+26     	; 0xf6 <_ZN8ActuatorC1Eh+0x4e>
	{
		this->io_port = IO_port::B;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	92 83       	std	Z+2, r25	; 0x02
  e2:	81 83       	std	Z+1, r24	; 0x01
		this->PIN = PIN - 8;
  e4:	60 83       	st	Z, r22
		SET (DDRB, this->PIN);
  e6:	24 b1       	in	r18, 0x04	; 4
  e8:	02 c0       	rjmp	.+4      	; 0xee <_ZN8ActuatorC1Eh+0x46>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <_ZN8ActuatorC1Eh+0x42>
  f2:	82 2b       	or	r24, r18
  f4:	84 b9       	out	0x04, r24	; 4
  f6:	08 95       	ret

000000f8 <_ZN8Actuator2onEv>:
	}
}
void Actuator::on(void)
{
  f8:	fc 01       	movw	r30, r24
	if (this->io_port == IO_port::B)
  fa:	81 81       	ldd	r24, Z+1	; 0x01
  fc:	92 81       	ldd	r25, Z+2	; 0x02
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	91 05       	cpc	r25, r1
 102:	61 f4       	brne	.+24     	; 0x11c <_ZN8Actuator2onEv+0x24>
	SET(PORTB, this->PIN);
 104:	25 b1       	in	r18, 0x05	; 5
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	00 80       	ld	r0, Z
 10c:	02 c0       	rjmp	.+4      	; 0x112 <_ZN8Actuator2onEv+0x1a>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <_ZN8Actuator2onEv+0x16>
 116:	82 2b       	or	r24, r18
 118:	85 b9       	out	0x05, r24	; 5
 11a:	0d c0       	rjmp	.+26     	; 0x136 <_ZN8Actuator2onEv+0x3e>
	else if(this->io_port == IO_port::D)
 11c:	03 97       	sbiw	r24, 0x03	; 3
 11e:	59 f4       	brne	.+22     	; 0x136 <_ZN8Actuator2onEv+0x3e>
	SET(PORTD, this->PIN);
 120:	2b b1       	in	r18, 0x0b	; 11
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	00 80       	ld	r0, Z
 128:	02 c0       	rjmp	.+4      	; 0x12e <_ZN8Actuator2onEv+0x36>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <_ZN8Actuator2onEv+0x32>
 132:	82 2b       	or	r24, r18
 134:	8b b9       	out	0x0b, r24	; 11
	this->enabled = true;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	83 83       	std	Z+3, r24	; 0x03
 13a:	08 95       	ret

0000013c <_ZN8Actuator3offEv>:
	return;
}
void Actuator::off(void)
{
 13c:	fc 01       	movw	r30, r24
	if (this->io_port == IO_port::B)
 13e:	81 81       	ldd	r24, Z+1	; 0x01
 140:	92 81       	ldd	r25, Z+2	; 0x02
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	91 05       	cpc	r25, r1
 146:	81 f4       	brne	.+32     	; 0x168 <_ZN8Actuator3offEv+0x2c>
	CLEAR(PORTB, this->PIN);
 148:	95 b1       	in	r25, 0x05	; 5
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	00 80       	ld	r0, Z
 150:	02 c0       	rjmp	.+4      	; 0x156 <_ZN8Actuator3offEv+0x1a>
 152:	22 0f       	add	r18, r18
 154:	33 1f       	adc	r19, r19
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <_ZN8Actuator3offEv+0x16>
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	23 2b       	or	r18, r19
 15e:	09 f0       	breq	.+2      	; 0x162 <_ZN8Actuator3offEv+0x26>
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	89 23       	and	r24, r25
 164:	85 b9       	out	0x05, r24	; 5
 166:	11 c0       	rjmp	.+34     	; 0x18a <_ZN8Actuator3offEv+0x4e>
	else if(this->io_port == IO_port::D)
 168:	03 97       	sbiw	r24, 0x03	; 3
 16a:	79 f4       	brne	.+30     	; 0x18a <_ZN8Actuator3offEv+0x4e>
	CLEAR(PORTD, this->PIN);
 16c:	9b b1       	in	r25, 0x0b	; 11
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	00 80       	ld	r0, Z
 174:	02 c0       	rjmp	.+4      	; 0x17a <_ZN8Actuator3offEv+0x3e>
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <_ZN8Actuator3offEv+0x3a>
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	23 2b       	or	r18, r19
 182:	09 f0       	breq	.+2      	; 0x186 <_ZN8Actuator3offEv+0x4a>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	89 23       	and	r24, r25
 188:	8b b9       	out	0x0b, r24	; 11
	this->enabled = true;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	83 83       	std	Z+3, r24	; 0x03
 18e:	08 95       	ret

00000190 <_ZN6ButtonC1Eh>:
#include "GPIO.h"

Button::Button(const uint8_t PIN)
 190:	fc 01       	movw	r30, r24
 192:	10 82       	st	Z, r1
 194:	12 82       	std	Z+2, r1	; 0x02
 196:	11 82       	std	Z+1, r1	; 0x01
 198:	13 82       	std	Z+3, r1	; 0x03
{
	if(PIN >= 0 && PIN <=7)
 19a:	68 30       	cpi	r22, 0x08	; 8
 19c:	80 f4       	brcc	.+32     	; 0x1be <_ZN6ButtonC1Eh+0x2e>
	{
		this->io_port = IO_port::D;
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	92 83       	std	Z+2, r25	; 0x02
 1a4:	81 83       	std	Z+1, r24	; 0x01
		this->PIN=PIN;
 1a6:	60 83       	st	Z, r22
		SET(PORTD, this->PIN);
 1a8:	2b b1       	in	r18, 0x0b	; 11
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	06 2e       	mov	r0, r22
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <_ZN6ButtonC1Eh+0x26>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	0a 94       	dec	r0
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <_ZN6ButtonC1Eh+0x22>
 1ba:	82 2b       	or	r24, r18
 1bc:	8b b9       	out	0x0b, r24	; 11
	}
	else if (PIN >= 8 && PIN <= 13);
	{
		this->io_port = IO_port::B;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	92 83       	std	Z+2, r25	; 0x02
 1c4:	81 83       	std	Z+1, r24	; 0x01
		this->PIN = PIN - 8;
 1c6:	68 50       	subi	r22, 0x08	; 8
 1c8:	60 83       	st	Z, r22
		SET(PORTB, this->PIN);
 1ca:	25 b1       	in	r18, 0x05	; 5
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <_ZN6ButtonC1Eh+0x42>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <_ZN6ButtonC1Eh+0x3e>
 1d6:	82 2b       	or	r24, r18
 1d8:	85 b9       	out	0x05, r24	; 5
 1da:	08 95       	ret

000001dc <_ZN6Button10is_pressedEv>:
	return;
}
	
bool Button::is_pressed(void)
{
	if (this->io_port ==IO_port::B)
 1dc:	fc 01       	movw	r30, r24
 1de:	21 81       	ldd	r18, Z+1	; 0x01
 1e0:	32 81       	ldd	r19, Z+2	; 0x02
 1e2:	21 30       	cpi	r18, 0x01	; 1
 1e4:	31 05       	cpc	r19, r1
 1e6:	61 f4       	brne	.+24     	; 0x200 <_ZN6Button10is_pressedEv+0x24>
	return READ(PINB, this->PIN);
 1e8:	23 b1       	in	r18, 0x03	; 3
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	a9 01       	movw	r20, r18
 1ee:	00 80       	ld	r0, Z
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <_ZN6Button10is_pressedEv+0x1a>
 1f2:	55 95       	asr	r21
 1f4:	47 95       	ror	r20
 1f6:	0a 94       	dec	r0
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <_ZN6Button10is_pressedEv+0x16>
 1fa:	ca 01       	movw	r24, r20
 1fc:	81 70       	andi	r24, 0x01	; 1
 1fe:	08 95       	ret
	else if (this->io_port == IO_port::D)
 200:	23 30       	cpi	r18, 0x03	; 3
 202:	31 05       	cpc	r19, r1
 204:	69 f4       	brne	.+26     	; 0x220 <_ZN6Button10is_pressedEv+0x44>
	return READ(PIND, this->PIN);
 206:	29 b1       	in	r18, 0x09	; 9
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	a9 01       	movw	r20, r18
 20c:	fc 01       	movw	r30, r24
 20e:	00 80       	ld	r0, Z
 210:	02 c0       	rjmp	.+4      	; 0x216 <_ZN6Button10is_pressedEv+0x3a>
 212:	55 95       	asr	r21
 214:	47 95       	ror	r20
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <_ZN6Button10is_pressedEv+0x36>
 21a:	ca 01       	movw	r24, r20
 21c:	81 70       	andi	r24, 0x01	; 1
 21e:	08 95       	ret
	return false;
 220:	80 e0       	ldi	r24, 0x00	; 0
}
 222:	08 95       	ret

00000224 <_Z41__static_initialization_and_destruction_0ii>:
		if (button.is_pressed())
			actuator.on();
		else
			actuator.off();
    }
}
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	79 f4       	brne	.+30     	; 0x246 <_Z41__static_initialization_and_destruction_0ii+0x22>
 228:	6f 3f       	cpi	r22, 0xFF	; 255
 22a:	7f 4f       	sbci	r23, 0xFF	; 255
 22c:	61 f4       	brne	.+24     	; 0x246 <_Z41__static_initialization_and_destruction_0ii+0x22>
 22e:	e4 e0       	ldi	r30, 0x04	; 4
 230:	f1 e0       	ldi	r31, 0x01	; 1
 232:	10 82       	st	Z, r1
 234:	12 82       	std	Z+2, r1	; 0x02
 236:	11 82       	std	Z+1, r1	; 0x01
{
private:
	bool interrupt_enabled = false;
public:
	
	Button(void) {}
 238:	13 82       	std	Z+3, r1	; 0x03

#ifndef GPIO_H_
#define GPIO_H_
#include "definitions.h"

class GPIO
 23a:	e0 e0       	ldi	r30, 0x00	; 0
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	10 82       	st	Z, r1
 240:	12 82       	std	Z+2, r1	; 0x02
 242:	11 82       	std	Z+1, r1	; 0x01
class Actuator : public GPIO
{
private:
	bool enabled = false;
public:
	Actuator(void) {}
 244:	13 82       	std	Z+3, r1	; 0x03
 246:	08 95       	ret

00000248 <main>:
#include "header.h"

Button button;
Actuator actuator;
int main(void)
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	28 97       	sbiw	r28, 0x08	; 8
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
    button = Button(13);
 25c:	6d e0       	ldi	r22, 0x0D	; 13
 25e:	ce 01       	movw	r24, r28
 260:	05 96       	adiw	r24, 0x05	; 5
 262:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN6ButtonC1Eh>
 266:	8d 81       	ldd	r24, Y+5	; 0x05
 268:	9e 81       	ldd	r25, Y+6	; 0x06
 26a:	af 81       	ldd	r26, Y+7	; 0x07
 26c:	b8 85       	ldd	r27, Y+8	; 0x08
 26e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <button>
 272:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <button+0x1>
 276:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <button+0x2>
 27a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <button+0x3>
	actuator = Actuator(5);
 27e:	65 e0       	ldi	r22, 0x05	; 5
 280:	ce 01       	movw	r24, r28
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN8ActuatorC1Eh>
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	9a 81       	ldd	r25, Y+2	; 0x02
 28c:	ab 81       	ldd	r26, Y+3	; 0x03
 28e:	bc 81       	ldd	r27, Y+4	; 0x04
 290:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 294:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 298:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 29c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    while (1) 
    {
		if (button.is_pressed())
 2a0:	84 e0       	ldi	r24, 0x04	; 4
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN6Button10is_pressedEv>
 2a8:	88 23       	and	r24, r24
 2aa:	29 f0       	breq	.+10     	; 0x2b6 <main+0x6e>
			actuator.on();
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN8Actuator2onEv>
 2b4:	f5 cf       	rjmp	.-22     	; 0x2a0 <main+0x58>
		else
			actuator.off();
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN8Actuator3offEv>
 2be:	f0 cf       	rjmp	.-32     	; 0x2a0 <main+0x58>

000002c0 <_GLOBAL__sub_I_button>:
    }
}
 2c0:	6f ef       	ldi	r22, 0xFF	; 255
 2c2:	7f ef       	ldi	r23, 0xFF	; 255
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 12 01 	call	0x224	; 0x224 <_Z41__static_initialization_and_destruction_0ii>
 2cc:	08 95       	ret

000002ce <__tablejump2__>:
 2ce:	ee 0f       	add	r30, r30
 2d0:	ff 1f       	adc	r31, r31
 2d2:	05 90       	lpm	r0, Z+
 2d4:	f4 91       	lpm	r31, Z
 2d6:	e0 2d       	mov	r30, r0
 2d8:	09 94       	ijmp

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
