
Kod bil.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  00000442  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000442  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e78  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001007  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a1  00000000  00000000  00003483  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00003d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000990  00000000  00000000  00003f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000052d  00000000  00000000  00004910  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004e3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_16>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	21 01       	movw	r4, r2

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 31       	cpi	r26, 0x12	; 18
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	c5 e3       	ldi	r28, 0x35	; 53
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
  8e:	21 97       	sbiw	r28, 0x01	; 1
  90:	fe 01       	movw	r30, r28
  92:	0e 94 df 01 	call	0x3be	; 0x3be <__tablejump2__>
  96:	c4 33       	cpi	r28, 0x34	; 52
  98:	d1 07       	cpc	r29, r17
  9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
  9c:	0e 94 32 01 	call	0x264	; 0x264 <main>
  a0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <_ZN6ButtonC1Eh>:
#include "GPIO.h"

Button::Button(const uint8_t PIN)
  a8:	fc 01       	movw	r30, r24
#define DISABLE_TIMER1 TIMSK1 = 0x00
#define DISABLE_TIMER2 TIMSK2 = 0x00

enum class PWM_Period { ON, OFF };

class GPIO
  aa:	10 82       	st	Z, r1
  ac:	12 82       	std	Z+2, r1	; 0x02
  ae:	11 82       	std	Z+1, r1	; 0x01
  b0:	13 82       	std	Z+3, r1	; 0x03
{
	if(PIN >= 0 && PIN <=7)
  b2:	68 30       	cpi	r22, 0x08	; 8
  b4:	80 f4       	brcc	.+32     	; 0xd6 <_ZN6ButtonC1Eh+0x2e>
	{
		this->io_port = IO_port::D;
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	92 83       	std	Z+2, r25	; 0x02
  bc:	81 83       	std	Z+1, r24	; 0x01
		this->PIN=PIN;
  be:	60 83       	st	Z, r22
		SET(PORTD, this->PIN);
  c0:	2b b1       	in	r18, 0x0b	; 11
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	06 2e       	mov	r0, r22
  c8:	02 c0       	rjmp	.+4      	; 0xce <_ZN6ButtonC1Eh+0x26>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <_ZN6ButtonC1Eh+0x22>
  d2:	82 2b       	or	r24, r18
  d4:	8b b9       	out	0x0b, r24	; 11
	}
	else if (PIN >= 8 && PIN <= 13);
	{
		this->io_port = IO_port::B;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	92 83       	std	Z+2, r25	; 0x02
  dc:	81 83       	std	Z+1, r24	; 0x01
		this->PIN = PIN - 8;
  de:	68 50       	subi	r22, 0x08	; 8
  e0:	60 83       	st	Z, r22
		SET(PORTB, this->PIN);
  e2:	25 b1       	in	r18, 0x05	; 5
  e4:	02 c0       	rjmp	.+4      	; 0xea <_ZN6ButtonC1Eh+0x42>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <_ZN6ButtonC1Eh+0x3e>
  ee:	82 2b       	or	r24, r18
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	08 95       	ret

000000f4 <_ZN6Button10is_pressedEv>:
	return;
}
	
bool Button::is_pressed(void)
{
	if (this->io_port ==IO_port::B)
  f4:	fc 01       	movw	r30, r24
  f6:	21 81       	ldd	r18, Z+1	; 0x01
  f8:	32 81       	ldd	r19, Z+2	; 0x02
  fa:	21 30       	cpi	r18, 0x01	; 1
  fc:	31 05       	cpc	r19, r1
  fe:	61 f4       	brne	.+24     	; 0x118 <_ZN6Button10is_pressedEv+0x24>
	return READ(PINB, this->PIN);
 100:	23 b1       	in	r18, 0x03	; 3
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	a9 01       	movw	r20, r18
 106:	00 80       	ld	r0, Z
 108:	02 c0       	rjmp	.+4      	; 0x10e <_ZN6Button10is_pressedEv+0x1a>
 10a:	55 95       	asr	r21
 10c:	47 95       	ror	r20
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <_ZN6Button10is_pressedEv+0x16>
 112:	ca 01       	movw	r24, r20
 114:	81 70       	andi	r24, 0x01	; 1
 116:	08 95       	ret
	else if (this->io_port == IO_port::D)
 118:	23 30       	cpi	r18, 0x03	; 3
 11a:	31 05       	cpc	r19, r1
 11c:	69 f4       	brne	.+26     	; 0x138 <_ZN6Button10is_pressedEv+0x44>
	return READ(PIND, this->PIN);
 11e:	29 b1       	in	r18, 0x09	; 9
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	a9 01       	movw	r20, r18
 124:	fc 01       	movw	r30, r24
 126:	00 80       	ld	r0, Z
 128:	02 c0       	rjmp	.+4      	; 0x12e <_ZN6Button10is_pressedEv+0x3a>
 12a:	55 95       	asr	r21
 12c:	47 95       	ror	r20
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <_ZN6Button10is_pressedEv+0x36>
 132:	ca 01       	movw	r24, r20
 134:	81 70       	andi	r24, 0x01	; 1
 136:	08 95       	ret
	return false;
 138:	80 e0       	ldi	r24, 0x00	; 0
}
 13a:	08 95       	ret

0000013c <_Z41__static_initialization_and_destruction_0ii>:

USART_Timer new_USART_Timer(const uint16_t delay) 
{ 
	USART_Timer self(delay); 
	return self; 
}
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	a9 f4       	brne	.+42     	; 0x16a <_Z41__static_initialization_and_destruction_0ii+0x2e>
 140:	6f 3f       	cpi	r22, 0xFF	; 255
 142:	7f 4f       	sbci	r23, 0xFF	; 255
 144:	91 f4       	brne	.+36     	; 0x16a <_Z41__static_initialization_and_destruction_0ii+0x2e>
 146:	ee e0       	ldi	r30, 0x0E	; 14
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	10 82       	st	Z, r1
 14c:	12 82       	std	Z+2, r1	; 0x02
 14e:	11 82       	std	Z+1, r1	; 0x01
 150:	13 82       	std	Z+3, r1	; 0x03
 152:	e3 e0       	ldi	r30, 0x03	; 3
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	10 82       	st	Z, r1
 158:	12 82       	std	Z+2, r1	; 0x02
 15a:	11 82       	std	Z+1, r1	; 0x01
 15c:	13 82       	std	Z+3, r1	; 0x03
 15e:	14 82       	std	Z+4, r1	; 0x04
 160:	15 82       	std	Z+5, r1	; 0x05
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	82 87       	std	Z+10, r24	; 0x0a
 166:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 16a:	08 95       	ret

0000016c <_Z12start_Buttonh>:
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	00 d0       	rcall	.+0      	; 0x172 <_Z12start_Buttonh+0x6>
 172:	00 d0       	rcall	.+0      	; 0x174 <_Z12start_Buttonh+0x8>
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	68 2f       	mov	r22, r24
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN6ButtonC1Eh>
 182:	69 81       	ldd	r22, Y+1	; 0x01
 184:	7a 81       	ldd	r23, Y+2	; 0x02
 186:	8b 81       	ldd	r24, Y+3	; 0x03
 188:	9c 81       	ldd	r25, Y+4	; 0x04
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <_Z9pwm_motorh>:
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ec 01       	movw	r28, r24
 19e:	0e 94 44 01 	call	0x288	; 0x288 <_ZN5MotorC1Eh>
 1a2:	ce 01       	movw	r24, r28
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <_Z10new_sensorh>:

Sensor new_sensor(const uint8_t PIN)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	00 d0       	rcall	.+0      	; 0x1b0 <_Z10new_sensorh+0x6>
 1b0:	1f 92       	push	r1
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
	Sensor self(PIN);
 1b6:	68 2f       	mov	r22, r24
 1b8:	ce 01       	movw	r24, r28
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN6SensorC1Eh>
	return self;
 1c0:	69 81       	ldd	r22, Y+1	; 0x01
 1c2:	7a 81       	ldd	r23, Y+2	; 0x02
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
}
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <_Z9init_GPIOv>:
Button button;
Motor motor;
Sensor sensor;

void init_GPIO() 
{ 
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	2b 97       	sbiw	r28, 0x0b	; 11
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
	 button = start_Button(13); 
 1e6:	8d e0       	ldi	r24, 0x0D	; 13
 1e8:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z12start_Buttonh>
 1ec:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <button>
 1f0:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <button+0x1>
 1f4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <button+0x2>
 1f8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <button+0x3>
	 motor = pwm_motor(5);
 1fc:	65 e0       	ldi	r22, 0x05	; 5
 1fe:	ce 01       	movw	r24, r28
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	0e 94 cc 00 	call	0x198	; 0x198 <_Z9pwm_motorh>
 206:	8b e0       	ldi	r24, 0x0B	; 11
 208:	fe 01       	movw	r30, r28
 20a:	31 96       	adiw	r30, 0x01	; 1
 20c:	a3 e0       	ldi	r26, 0x03	; 3
 20e:	b1 e0       	ldi	r27, 0x01	; 1
 210:	01 90       	ld	r0, Z+
 212:	0d 92       	st	X+, r0
 214:	8a 95       	dec	r24
 216:	e1 f7       	brne	.-8      	; 0x210 <_Z9init_GPIOv+0x3e>
	 sensor = new_sensor(1); // A0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z10new_sensorh>
 21e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 222:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 226:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
	 DDRD |= ((1<<IN1)|(1<<IN2));
 22a:	8a b1       	in	r24, 0x0a	; 10
 22c:	80 68       	ori	r24, 0x80	; 128
 22e:	8a b9       	out	0x0a, r24	; 10
	 return;
}
 230:	2b 96       	adiw	r28, 0x0b	; 11
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <_GLOBAL__sub_I_button>:

Sensor new_sensor(const uint8_t PIN)
{
	Sensor self(PIN);
	return self;
}
 242:	6f ef       	ldi	r22, 0xFF	; 255
 244:	7f ef       	ldi	r23, 0xFF	; 255
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z41__static_initialization_and_destruction_0ii>
 24e:	08 95       	ret

00000250 <__vector_16>:
#include "GPIO.h"

ISR (TIMER0_OVF_vect)
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
	
	return;
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <main>:

#include "header.h"

int main(void)
{
    init_GPIO();
 264:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_Z9init_GPIOv>
    while (1) 
    {
		if (button.is_pressed())
 268:	8e e0       	ldi	r24, 0x0E	; 14
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN6Button10is_pressedEv>
 270:	88 23       	and	r24, r24
 272:	29 f0       	breq	.+10     	; 0x27e <main+0x1a>
			motor.off();
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_ZN5Motor3offEv>
 27c:	f5 cf       	rjmp	.-22     	; 0x268 <main+0x4>
		else
			motor.on();	
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN5Motor2onEv>
 286:	f0 cf       	rjmp	.-32     	; 0x268 <main+0x4>

00000288 <_ZN5MotorC1Eh>:
#include "GPIO.h"

Motor::Motor(const uint8_t PIN)
 288:	fc 01       	movw	r30, r24
 28a:	10 82       	st	Z, r1
 28c:	12 82       	std	Z+2, r1	; 0x02
 28e:	11 82       	std	Z+1, r1	; 0x01
 290:	13 82       	std	Z+3, r1	; 0x03
 292:	14 82       	std	Z+4, r1	; 0x04
 294:	15 82       	std	Z+5, r1	; 0x05
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	82 87       	std	Z+10, r24	; 0x0a
{
	if(PIN >=0 && PIN <= 7)
 29a:	68 30       	cpi	r22, 0x08	; 8
 29c:	80 f4       	brcc	.+32     	; 0x2be <_ZN5MotorC1Eh+0x36>
	{
		this->io_port = IO_port::D;
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	92 83       	std	Z+2, r25	; 0x02
 2a4:	81 83       	std	Z+1, r24	; 0x01
		this->PIN = PIN;
 2a6:	60 83       	st	Z, r22
		SET(DDRD, this->PIN);
 2a8:	2a b1       	in	r18, 0x0a	; 10
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <_ZN5MotorC1Eh+0x2c>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <_ZN5MotorC1Eh+0x28>
 2b8:	82 2b       	or	r24, r18
 2ba:	8a b9       	out	0x0a, r24	; 10
 2bc:	10 c0       	rjmp	.+32     	; 0x2de <_ZN5MotorC1Eh+0x56>
	}
	else if (PIN >= 8 && PIN <= 13)
 2be:	68 50       	subi	r22, 0x08	; 8
 2c0:	66 30       	cpi	r22, 0x06	; 6
 2c2:	68 f4       	brcc	.+26     	; 0x2de <_ZN5MotorC1Eh+0x56>
	{
		this->io_port = IO_port::B;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	92 83       	std	Z+2, r25	; 0x02
 2ca:	81 83       	std	Z+1, r24	; 0x01
		this->PIN = PIN - 8;
 2cc:	60 83       	st	Z, r22
		SET (DDRB, this->PIN);
 2ce:	24 b1       	in	r18, 0x04	; 4
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <_ZN5MotorC1Eh+0x4e>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <_ZN5MotorC1Eh+0x4a>
 2da:	82 2b       	or	r24, r18
 2dc:	84 b9       	out	0x04, r24	; 4
	}
	this->sensor_PIN = 1;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	86 83       	std	Z+6, r24	; 0x06
	this->sensor_PCINT = this->sensor_PIN + 8;
 2e2:	89 e0       	ldi	r24, 0x09	; 9
 2e4:	87 83       	std	Z+7, r24	; 0x07
	this->sensor_io_port = IO_port::C;
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	91 87       	std	Z+9, r25	; 0x09
 2ec:	80 87       	std	Z+8, r24	; 0x08
 2ee:	08 95       	ret

000002f0 <_ZN5Motor3offEv>:
	this->motor_enabled = true;
	return;
}

void Motor::off(void)
{
 2f0:	fc 01       	movw	r30, r24
	if (this->io_port == IO_port::B)
 2f2:	81 81       	ldd	r24, Z+1	; 0x01
 2f4:	92 81       	ldd	r25, Z+2	; 0x02
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	91 05       	cpc	r25, r1
 2fa:	81 f4       	brne	.+32     	; 0x31c <_ZN5Motor3offEv+0x2c>
	CLEAR(PORTB, this->PIN);
 2fc:	95 b1       	in	r25, 0x05	; 5
 2fe:	21 e0       	ldi	r18, 0x01	; 1
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	00 80       	ld	r0, Z
 304:	02 c0       	rjmp	.+4      	; 0x30a <_ZN5Motor3offEv+0x1a>
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <_ZN5Motor3offEv+0x16>
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	23 2b       	or	r18, r19
 312:	09 f0       	breq	.+2      	; 0x316 <_ZN5Motor3offEv+0x26>
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	89 23       	and	r24, r25
 318:	85 b9       	out	0x05, r24	; 5
 31a:	11 c0       	rjmp	.+34     	; 0x33e <_ZN5Motor3offEv+0x4e>
	else if(this->io_port == IO_port::D)
 31c:	03 97       	sbiw	r24, 0x03	; 3
 31e:	79 f4       	brne	.+30     	; 0x33e <_ZN5Motor3offEv+0x4e>
	CLEAR(PORTD, this->PIN);
 320:	9b b1       	in	r25, 0x0b	; 11
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	00 80       	ld	r0, Z
 328:	02 c0       	rjmp	.+4      	; 0x32e <_ZN5Motor3offEv+0x3e>
 32a:	22 0f       	add	r18, r18
 32c:	33 1f       	adc	r19, r19
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <_ZN5Motor3offEv+0x3a>
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	23 2b       	or	r18, r19
 336:	09 f0       	breq	.+2      	; 0x33a <_ZN5Motor3offEv+0x4a>
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	89 23       	and	r24, r25
 33c:	8b b9       	out	0x0b, r24	; 11
	this->motor_enabled = false;
 33e:	14 82       	std	Z+4, r1	; 0x04
 340:	08 95       	ret

00000342 <_ZN5Motor14read_directionEv>:
	return;
}

void Motor::read_direction(void)
{
	if (forward_enabled)
 342:	fc 01       	movw	r30, r24
 344:	82 85       	ldd	r24, Z+10	; 0x0a
 346:	88 23       	and	r24, r24
 348:	31 f0       	breq	.+12     	; 0x356 <_ZN5Motor14read_directionEv+0x14>
	{
		PORTD |= (1<<IN1);
 34a:	8b b1       	in	r24, 0x0b	; 11
 34c:	80 68       	ori	r24, 0x80	; 128
 34e:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<IN2);
 350:	8b b1       	in	r24, 0x0b	; 11
 352:	8b b9       	out	0x0b, r24	; 11
 354:	08 95       	ret
	}
	else if (!forward_enabled)
 356:	81 11       	cpse	r24, r1
 358:	05 c0       	rjmp	.+10     	; 0x364 <_ZN5Motor14read_directionEv+0x22>
	{
		PORTD |= (1<<IN2);
 35a:	8b b1       	in	r24, 0x0b	; 11
 35c:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<IN1);
 35e:	8b b1       	in	r24, 0x0b	; 11
 360:	8f 77       	andi	r24, 0x7F	; 127
 362:	8b b9       	out	0x0b, r24	; 11
 364:	08 95       	ret

00000366 <_ZN5Motor2onEv>:
	this->sensor_PCINT = this->sensor_PIN + 8;
	this->sensor_io_port = IO_port::C;
}

void Motor::on(void)
{
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	ec 01       	movw	r28, r24
	if (this->io_port == IO_port::B)
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	9a 81       	ldd	r25, Y+2	; 0x02
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	91 05       	cpc	r25, r1
 374:	61 f4       	brne	.+24     	; 0x38e <_ZN5Motor2onEv+0x28>
	SET(PORTB, this->PIN);
 376:	25 b1       	in	r18, 0x05	; 5
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	08 80       	ld	r0, Y
 37e:	02 c0       	rjmp	.+4      	; 0x384 <_ZN5Motor2onEv+0x1e>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	0a 94       	dec	r0
 386:	e2 f7       	brpl	.-8      	; 0x380 <_ZN5Motor2onEv+0x1a>
 388:	82 2b       	or	r24, r18
 38a:	85 b9       	out	0x05, r24	; 5
 38c:	0d c0       	rjmp	.+26     	; 0x3a8 <_ZN5Motor2onEv+0x42>
	else if(this->io_port == IO_port::D)
 38e:	03 97       	sbiw	r24, 0x03	; 3
 390:	59 f4       	brne	.+22     	; 0x3a8 <_ZN5Motor2onEv+0x42>
	SET(PORTD, this->PIN);
 392:	2b b1       	in	r18, 0x0b	; 11
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	08 80       	ld	r0, Y
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <_ZN5Motor2onEv+0x3a>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <_ZN5Motor2onEv+0x36>
 3a4:	82 2b       	or	r24, r18
 3a6:	8b b9       	out	0x0b, r24	; 11
	this->read_direction();
 3a8:	ce 01       	movw	r24, r28
 3aa:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN5Motor14read_directionEv>
	this->motor_enabled = true;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	8c 83       	std	Y+4, r24	; 0x04
	return;
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <_ZN6SensorC1Eh>:
#include "GPIO.h"

Sensor::Sensor(const uint8_t PIN)
{
	this->sensor_pin = PIN;
 3b8:	fc 01       	movw	r30, r24
 3ba:	62 83       	std	Z+2, r22	; 0x02
 3bc:	08 95       	ret

000003be <__tablejump2__>:
 3be:	ee 0f       	add	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	05 90       	lpm	r0, Z+
 3c4:	f4 91       	lpm	r31, Z
 3c6:	e0 2d       	mov	r30, r0
 3c8:	09 94       	ijmp

000003ca <_exit>:
 3ca:	f8 94       	cli

000003cc <__stop_program>:
 3cc:	ff cf       	rjmp	.-2      	; 0x3cc <__stop_program>
