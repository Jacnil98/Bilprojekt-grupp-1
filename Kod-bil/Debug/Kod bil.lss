
Kod bil.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000354  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000121b  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b62  00000000  00000000  0000168f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056c  00000000  00000000  000021f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00002760  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066a  00000000  00000000  0000287c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000275  00000000  00000000  00002ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000315b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	eb 00       	.word	0x00eb	; ????

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 30       	cpi	r26, 0x0A	; 10
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	c5 e3       	ldi	r28, 0x35	; 53
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
  8e:	21 97       	sbiw	r28, 0x01	; 1
  90:	fe 01       	movw	r30, r28
  92:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__tablejump2__>
  96:	c4 33       	cpi	r28, 0x34	; 52
  98:	d1 07       	cpc	r29, r17
  9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
  9c:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  a0:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <_ZN6ButtonC1Eh>:
#include "GPIO.h"

Button::Button(const uint8_t PIN)
  a8:	fc 01       	movw	r30, r24
#define DISABLE_TIMER1 TIMSK1 = 0x00
#define DISABLE_TIMER2 TIMSK2 = 0x00

enum class PWM_Period { ON, OFF };

class GPIO
  aa:	10 82       	st	Z, r1
  ac:	12 82       	std	Z+2, r1	; 0x02
  ae:	11 82       	std	Z+1, r1	; 0x01
  b0:	13 82       	std	Z+3, r1	; 0x03
{
	if(PIN >= 0 && PIN <=7)
  b2:	68 30       	cpi	r22, 0x08	; 8
  b4:	80 f4       	brcc	.+32     	; 0xd6 <_ZN6ButtonC1Eh+0x2e>
	{
		this->io_port = IO_port::D;
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	92 83       	std	Z+2, r25	; 0x02
  bc:	81 83       	std	Z+1, r24	; 0x01
		this->PIN=PIN;
  be:	60 83       	st	Z, r22
		SET(PORTD, this->PIN);
  c0:	2b b1       	in	r18, 0x0b	; 11
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	06 2e       	mov	r0, r22
  c8:	02 c0       	rjmp	.+4      	; 0xce <_ZN6ButtonC1Eh+0x26>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <_ZN6ButtonC1Eh+0x22>
  d2:	82 2b       	or	r24, r18
  d4:	8b b9       	out	0x0b, r24	; 11
	}
	else if (PIN >= 8 && PIN <= 13);
	{
		this->io_port = IO_port::B;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	92 83       	std	Z+2, r25	; 0x02
  dc:	81 83       	std	Z+1, r24	; 0x01
		this->PIN = PIN - 8;
  de:	68 50       	subi	r22, 0x08	; 8
  e0:	60 83       	st	Z, r22
		SET(PORTB, this->PIN);
  e2:	25 b1       	in	r18, 0x05	; 5
  e4:	02 c0       	rjmp	.+4      	; 0xea <_ZN6ButtonC1Eh+0x42>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <_ZN6ButtonC1Eh+0x3e>
  ee:	82 2b       	or	r24, r18
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	08 95       	ret

000000f4 <_ZN6Button10is_pressedEv>:
	return;
}
	
bool Button::is_pressed(void)
{
	if (this->io_port ==IO_port::B)
  f4:	fc 01       	movw	r30, r24
  f6:	21 81       	ldd	r18, Z+1	; 0x01
  f8:	32 81       	ldd	r19, Z+2	; 0x02
  fa:	21 30       	cpi	r18, 0x01	; 1
  fc:	31 05       	cpc	r19, r1
  fe:	61 f4       	brne	.+24     	; 0x118 <_ZN6Button10is_pressedEv+0x24>
	return READ(PINB, this->PIN);
 100:	23 b1       	in	r18, 0x03	; 3
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	a9 01       	movw	r20, r18
 106:	00 80       	ld	r0, Z
 108:	02 c0       	rjmp	.+4      	; 0x10e <_ZN6Button10is_pressedEv+0x1a>
 10a:	55 95       	asr	r21
 10c:	47 95       	ror	r20
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <_ZN6Button10is_pressedEv+0x16>
 112:	ca 01       	movw	r24, r20
 114:	81 70       	andi	r24, 0x01	; 1
 116:	08 95       	ret
	else if (this->io_port == IO_port::D)
 118:	23 30       	cpi	r18, 0x03	; 3
 11a:	31 05       	cpc	r19, r1
 11c:	69 f4       	brne	.+26     	; 0x138 <_ZN6Button10is_pressedEv+0x44>
	return READ(PIND, this->PIN);
 11e:	29 b1       	in	r18, 0x09	; 9
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	a9 01       	movw	r20, r18
 124:	fc 01       	movw	r30, r24
 126:	00 80       	ld	r0, Z
 128:	02 c0       	rjmp	.+4      	; 0x12e <_ZN6Button10is_pressedEv+0x3a>
 12a:	55 95       	asr	r21
 12c:	47 95       	ror	r20
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <_ZN6Button10is_pressedEv+0x36>
 132:	ca 01       	movw	r24, r20
 134:	81 70       	andi	r24, 0x01	; 1
 136:	08 95       	ret
	return false;
 138:	80 e0       	ldi	r24, 0x00	; 0
}
 13a:	08 95       	ret

0000013c <_Z41__static_initialization_and_destruction_0ii>:
		if (button.is_pressed())
			motor.on();
		else
			motor.off();
    }
}
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	89 f4       	brne	.+34     	; 0x162 <_Z41__static_initialization_and_destruction_0ii+0x26>
 140:	6f 3f       	cpi	r22, 0xFF	; 255
 142:	7f 4f       	sbci	r23, 0xFF	; 255
 144:	71 f4       	brne	.+28     	; 0x162 <_Z41__static_initialization_and_destruction_0ii+0x26>
 146:	e6 e0       	ldi	r30, 0x06	; 6
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	10 82       	st	Z, r1
 14c:	12 82       	std	Z+2, r1	; 0x02
 14e:	11 82       	std	Z+1, r1	; 0x01
{
private:
	bool interrupt_enabled = false;
public:
	
	Button(void) {}
 150:	13 82       	std	Z+3, r1	; 0x03
#define DISABLE_TIMER1 TIMSK1 = 0x00
#define DISABLE_TIMER2 TIMSK2 = 0x00

enum class PWM_Period { ON, OFF };

class GPIO
 152:	e0 e0       	ldi	r30, 0x00	; 0
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	10 82       	st	Z, r1
 158:	12 82       	std	Z+2, r1	; 0x02
 15a:	11 82       	std	Z+1, r1	; 0x01
private:
	bool PWM_enabled = false;
	bool motor_enabled = false;
	bool interrupt_enabled = false;
public:
	Motor(void) {}
 15c:	13 82       	std	Z+3, r1	; 0x03
 15e:	14 82       	std	Z+4, r1	; 0x04
 160:	15 82       	std	Z+5, r1	; 0x05
 162:	08 95       	ret

00000164 <main>:
#include "header.h"

Button button;
Motor motor;
int main(void)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	2a 97       	sbiw	r28, 0x0a	; 10
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
    button = Button(13);
 178:	6d e0       	ldi	r22, 0x0D	; 13
 17a:	ce 01       	movw	r24, r28
 17c:	07 96       	adiw	r24, 0x07	; 7
 17e:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN6ButtonC1Eh>
 182:	8f 81       	ldd	r24, Y+7	; 0x07
 184:	98 85       	ldd	r25, Y+8	; 0x08
 186:	a9 85       	ldd	r26, Y+9	; 0x09
 188:	ba 85       	ldd	r27, Y+10	; 0x0a
 18a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <button>
 18e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <button+0x1>
 192:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <button+0x2>
 196:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <button+0x3>
	motor = Motor(5);
 19a:	65 e0       	ldi	r22, 0x05	; 5
 19c:	ce 01       	movw	r24, r28
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN5MotorC1Eh>
 1a4:	86 e0       	ldi	r24, 0x06	; 6
 1a6:	fe 01       	movw	r30, r28
 1a8:	31 96       	adiw	r30, 0x01	; 1
 1aa:	a0 e0       	ldi	r26, 0x00	; 0
 1ac:	b1 e0       	ldi	r27, 0x01	; 1
 1ae:	01 90       	ld	r0, Z+
 1b0:	0d 92       	st	X+, r0
 1b2:	8a 95       	dec	r24
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0x4a>
    while (1) 
    {
		if (button.is_pressed())
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN6Button10is_pressedEv>
 1be:	88 23       	and	r24, r24
 1c0:	29 f0       	breq	.+10     	; 0x1cc <main+0x68>
			motor.on();
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 1c 01 	call	0x238	; 0x238 <_ZN5Motor2onEv>
 1ca:	f5 cf       	rjmp	.-22     	; 0x1b6 <main+0x52>
		else
			motor.off();
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 3e 01 	call	0x27c	; 0x27c <_ZN5Motor3offEv>
 1d4:	f0 cf       	rjmp	.-32     	; 0x1b6 <main+0x52>

000001d6 <_GLOBAL__sub_I_button>:
    }
}
 1d6:	6f ef       	ldi	r22, 0xFF	; 255
 1d8:	7f ef       	ldi	r23, 0xFF	; 255
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z41__static_initialization_and_destruction_0ii>
 1e2:	08 95       	ret

000001e4 <_ZN5MotorC1Eh>:
#include "GPIO.h"

Motor::Motor(const uint8_t PIN)
 1e4:	fc 01       	movw	r30, r24
#define DISABLE_TIMER1 TIMSK1 = 0x00
#define DISABLE_TIMER2 TIMSK2 = 0x00

enum class PWM_Period { ON, OFF };

class GPIO
 1e6:	10 82       	st	Z, r1
 1e8:	12 82       	std	Z+2, r1	; 0x02
 1ea:	11 82       	std	Z+1, r1	; 0x01
 1ec:	13 82       	std	Z+3, r1	; 0x03
 1ee:	14 82       	std	Z+4, r1	; 0x04
 1f0:	15 82       	std	Z+5, r1	; 0x05
{
	if(PIN >=0 && PIN <= 7)
 1f2:	68 30       	cpi	r22, 0x08	; 8
 1f4:	80 f4       	brcc	.+32     	; 0x216 <_ZN5MotorC1Eh+0x32>
	{
		this->io_port = IO_port::D;
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	92 83       	std	Z+2, r25	; 0x02
 1fc:	81 83       	std	Z+1, r24	; 0x01
		this->PIN = PIN;
 1fe:	60 83       	st	Z, r22
		SET(DDRD, this->PIN);
 200:	2a b1       	in	r18, 0x0a	; 10
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <_ZN5MotorC1Eh+0x28>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <_ZN5MotorC1Eh+0x24>
 210:	82 2b       	or	r24, r18
 212:	8a b9       	out	0x0a, r24	; 10
 214:	08 95       	ret
	}
	else if (PIN >= 8 && PIN <= 13)
 216:	68 50       	subi	r22, 0x08	; 8
 218:	66 30       	cpi	r22, 0x06	; 6
 21a:	68 f4       	brcc	.+26     	; 0x236 <_ZN5MotorC1Eh+0x52>
	{
		this->io_port = IO_port::B;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	92 83       	std	Z+2, r25	; 0x02
 222:	81 83       	std	Z+1, r24	; 0x01
		this->PIN = PIN - 8;
 224:	60 83       	st	Z, r22
		SET (DDRB, this->PIN);
 226:	24 b1       	in	r18, 0x04	; 4
 228:	02 c0       	rjmp	.+4      	; 0x22e <_ZN5MotorC1Eh+0x4a>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <_ZN5MotorC1Eh+0x46>
 232:	82 2b       	or	r24, r18
 234:	84 b9       	out	0x04, r24	; 4
 236:	08 95       	ret

00000238 <_ZN5Motor2onEv>:
	}
}

void Motor::on(void)
{
 238:	fc 01       	movw	r30, r24
	if (this->io_port == IO_port::B)
 23a:	81 81       	ldd	r24, Z+1	; 0x01
 23c:	92 81       	ldd	r25, Z+2	; 0x02
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	91 05       	cpc	r25, r1
 242:	61 f4       	brne	.+24     	; 0x25c <_ZN5Motor2onEv+0x24>
	SET(PORTB, this->PIN);
 244:	25 b1       	in	r18, 0x05	; 5
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	00 80       	ld	r0, Z
 24c:	02 c0       	rjmp	.+4      	; 0x252 <_ZN5Motor2onEv+0x1a>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <_ZN5Motor2onEv+0x16>
 256:	82 2b       	or	r24, r18
 258:	85 b9       	out	0x05, r24	; 5
 25a:	0d c0       	rjmp	.+26     	; 0x276 <_ZN5Motor2onEv+0x3e>
	else if(this->io_port == IO_port::D)
 25c:	03 97       	sbiw	r24, 0x03	; 3
 25e:	59 f4       	brne	.+22     	; 0x276 <_ZN5Motor2onEv+0x3e>
	SET(PORTD, this->PIN);
 260:	2b b1       	in	r18, 0x0b	; 11
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	00 80       	ld	r0, Z
 268:	02 c0       	rjmp	.+4      	; 0x26e <_ZN5Motor2onEv+0x36>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	0a 94       	dec	r0
 270:	e2 f7       	brpl	.-8      	; 0x26a <_ZN5Motor2onEv+0x32>
 272:	82 2b       	or	r24, r18
 274:	8b b9       	out	0x0b, r24	; 11
	this->motor_enabled = true;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	84 83       	std	Z+4, r24	; 0x04
 27a:	08 95       	ret

0000027c <_ZN5Motor3offEv>:
	return;
}

void Motor::off(void)
{
 27c:	fc 01       	movw	r30, r24
	if (this->io_port == IO_port::B)
 27e:	81 81       	ldd	r24, Z+1	; 0x01
 280:	92 81       	ldd	r25, Z+2	; 0x02
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	91 05       	cpc	r25, r1
 286:	81 f4       	brne	.+32     	; 0x2a8 <_ZN5Motor3offEv+0x2c>
	CLEAR(PORTB, this->PIN);
 288:	95 b1       	in	r25, 0x05	; 5
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	00 80       	ld	r0, Z
 290:	02 c0       	rjmp	.+4      	; 0x296 <_ZN5Motor3offEv+0x1a>
 292:	22 0f       	add	r18, r18
 294:	33 1f       	adc	r19, r19
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <_ZN5Motor3offEv+0x16>
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	23 2b       	or	r18, r19
 29e:	09 f0       	breq	.+2      	; 0x2a2 <_ZN5Motor3offEv+0x26>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	89 23       	and	r24, r25
 2a4:	85 b9       	out	0x05, r24	; 5
 2a6:	11 c0       	rjmp	.+34     	; 0x2ca <_ZN5Motor3offEv+0x4e>
	else if(this->io_port == IO_port::D)
 2a8:	03 97       	sbiw	r24, 0x03	; 3
 2aa:	79 f4       	brne	.+30     	; 0x2ca <_ZN5Motor3offEv+0x4e>
	CLEAR(PORTD, this->PIN);
 2ac:	9b b1       	in	r25, 0x0b	; 11
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	00 80       	ld	r0, Z
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <_ZN5Motor3offEv+0x3e>
 2b6:	22 0f       	add	r18, r18
 2b8:	33 1f       	adc	r19, r19
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <_ZN5Motor3offEv+0x3a>
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	23 2b       	or	r18, r19
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <_ZN5Motor3offEv+0x4a>
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	89 23       	and	r24, r25
 2c8:	8b b9       	out	0x0b, r24	; 11
	this->motor_enabled = true;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	84 83       	std	Z+4, r24	; 0x04
 2ce:	08 95       	ret

000002d0 <__tablejump2__>:
 2d0:	ee 0f       	add	r30, r30
 2d2:	ff 1f       	adc	r31, r31
 2d4:	05 90       	lpm	r0, Z+
 2d6:	f4 91       	lpm	r31, Z
 2d8:	e0 2d       	mov	r30, r0
 2da:	09 94       	ijmp

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
