
Kod bil.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  000002bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001314  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c02  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e7  00000000  00000000  00002322  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  0000290c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006bb  00000000  00000000  00002a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000315  00000000  00000000  00003137  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000344c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	e8 00       	.word	0x00e8	; ????

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 30       	cpi	r26, 0x0A	; 10
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	c5 e3       	ldi	r28, 0x35	; 53
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
  8e:	21 97       	sbiw	r28, 0x01	; 1
  90:	fe 01       	movw	r30, r28
  92:	0e 94 1c 01 	call	0x238	; 0x238 <__tablejump2__>
  96:	c4 33       	cpi	r28, 0x34	; 52
  98:	d1 07       	cpc	r29, r17
  9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
  9c:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  a0:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <_ZN6ButtonC1Eh>:
#include "GPIO.h"

Button::Button(const uint8_t PIN)
  a8:	fc 01       	movw	r30, r24
#define DISABLE_TIMER1 TIMSK1 = 0x00
#define DISABLE_TIMER2 TIMSK2 = 0x00

enum class PWM_Period { ON, OFF };

class GPIO
  aa:	10 82       	st	Z, r1
  ac:	12 82       	std	Z+2, r1	; 0x02
  ae:	11 82       	std	Z+1, r1	; 0x01
  b0:	13 82       	std	Z+3, r1	; 0x03
{
	if(PIN >= 0 && PIN <=7)
  b2:	68 30       	cpi	r22, 0x08	; 8
  b4:	80 f4       	brcc	.+32     	; 0xd6 <_ZN6ButtonC1Eh+0x2e>
	{
		this->io_port = IO_port::D;
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	92 83       	std	Z+2, r25	; 0x02
  bc:	81 83       	std	Z+1, r24	; 0x01
		this->PIN=PIN;
  be:	60 83       	st	Z, r22
		SET(PORTD, this->PIN);
  c0:	2b b1       	in	r18, 0x0b	; 11
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	06 2e       	mov	r0, r22
  c8:	02 c0       	rjmp	.+4      	; 0xce <_ZN6ButtonC1Eh+0x26>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <_ZN6ButtonC1Eh+0x22>
  d2:	82 2b       	or	r24, r18
  d4:	8b b9       	out	0x0b, r24	; 11
	}
	else if (PIN >= 8 && PIN <= 13);
	{
		this->io_port = IO_port::B;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	92 83       	std	Z+2, r25	; 0x02
  dc:	81 83       	std	Z+1, r24	; 0x01
		this->PIN = PIN - 8;
  de:	68 50       	subi	r22, 0x08	; 8
  e0:	60 83       	st	Z, r22
		SET(PORTB, this->PIN);
  e2:	25 b1       	in	r18, 0x05	; 5
  e4:	02 c0       	rjmp	.+4      	; 0xea <_ZN6ButtonC1Eh+0x42>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <_ZN6ButtonC1Eh+0x3e>
  ee:	82 2b       	or	r24, r18
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	08 95       	ret

000000f4 <_Z41__static_initialization_and_destruction_0ii>:

Motor pwm_motor(const uint8_t PIN)
{
	Motor self(PIN);
	return self;
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	89 f4       	brne	.+34     	; 0x11a <_Z41__static_initialization_and_destruction_0ii+0x26>
  f8:	6f 3f       	cpi	r22, 0xFF	; 255
  fa:	7f 4f       	sbci	r23, 0xFF	; 255
  fc:	71 f4       	brne	.+28     	; 0x11a <_Z41__static_initialization_and_destruction_0ii+0x26>
  fe:	e6 e0       	ldi	r30, 0x06	; 6
 100:	f1 e0       	ldi	r31, 0x01	; 1
 102:	10 82       	st	Z, r1
 104:	12 82       	std	Z+2, r1	; 0x02
 106:	11 82       	std	Z+1, r1	; 0x01
{
private:
	bool interrupt_enabled = false;
public:
	
	Button(void) {}
 108:	13 82       	std	Z+3, r1	; 0x03
#define DISABLE_TIMER1 TIMSK1 = 0x00
#define DISABLE_TIMER2 TIMSK2 = 0x00

enum class PWM_Period { ON, OFF };

class GPIO
 10a:	e0 e0       	ldi	r30, 0x00	; 0
 10c:	f1 e0       	ldi	r31, 0x01	; 1
 10e:	10 82       	st	Z, r1
 110:	12 82       	std	Z+2, r1	; 0x02
 112:	11 82       	std	Z+1, r1	; 0x01
private:
	bool PWM_enabled = false;
	bool motor_enabled = false;
	bool interrupt_enabled = false;
public:
	Motor(void) {}
 114:	13 82       	std	Z+3, r1	; 0x03
 116:	14 82       	std	Z+4, r1	; 0x04
 118:	15 82       	std	Z+5, r1	; 0x05
 11a:	08 95       	ret

0000011c <_Z12start_Buttonh>:
	 motor = pwm_motor(5);
	 return;
}

Button start_Button(const uint8_t PIN)
{ 
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	00 d0       	rcall	.+0      	; 0x122 <_Z12start_Buttonh+0x6>
 122:	00 d0       	rcall	.+0      	; 0x124 <_Z12start_Buttonh+0x8>
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
	Button self(PIN); 
 128:	68 2f       	mov	r22, r24
 12a:	ce 01       	movw	r24, r28
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN6ButtonC1Eh>
	return self; 
 132:	69 81       	ldd	r22, Y+1	; 0x01
 134:	7a 81       	ldd	r23, Y+2	; 0x02
 136:	8b 81       	ldd	r24, Y+3	; 0x03
 138:	9c 81       	ldd	r25, Y+4	; 0x04
}
 13a:	0f 90       	pop	r0
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	0f 90       	pop	r0
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <_Z9pwm_motorh>:

Motor pwm_motor(const uint8_t PIN)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	2c 97       	sbiw	r28, 0x0c	; 12
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	f8 94       	cli
 156:	de bf       	out	0x3e, r29	; 62
 158:	0f be       	out	0x3f, r0	; 63
 15a:	cd bf       	out	0x3d, r28	; 61
	Motor self(PIN);
 15c:	68 2f       	mov	r22, r24
 15e:	ce 01       	movw	r24, r28
 160:	07 96       	adiw	r24, 0x07	; 7
 162:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN5MotorC1Eh>
	return self;
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	fe 01       	movw	r30, r28
 16a:	37 96       	adiw	r30, 0x07	; 7
 16c:	de 01       	movw	r26, r28
 16e:	11 96       	adiw	r26, 0x01	; 1
 170:	01 90       	ld	r0, Z+
 172:	0d 92       	st	X+, r0
 174:	8a 95       	dec	r24
 176:	e1 f7       	brne	.-8      	; 0x170 <_Z9pwm_motorh+0x28>
 178:	29 81       	ldd	r18, Y+1	; 0x01
 17a:	3a 81       	ldd	r19, Y+2	; 0x02
 17c:	4b 81       	ldd	r20, Y+3	; 0x03
 17e:	5c 81       	ldd	r21, Y+4	; 0x04
 180:	6d 81       	ldd	r22, Y+5	; 0x05
 182:	7e 81       	ldd	r23, Y+6	; 0x06
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	2c 96       	adiw	r28, 0x0c	; 12
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	de bf       	out	0x3e, r29	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	cd bf       	out	0x3d, r28	; 61
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <_Z9init_GPIOv>:
Button button;
Motor motor;

void init_GPIO() 
{ 
	 button = start_Button(13); 
 19a:	8d e0       	ldi	r24, 0x0D	; 13
 19c:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z12start_Buttonh>
 1a0:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <button>
 1a4:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <button+0x1>
 1a8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <button+0x2>
 1ac:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <button+0x3>
	 motor = pwm_motor(5);
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	0e 94 a4 00 	call	0x148	; 0x148 <_Z9pwm_motorh>
 1b6:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ba:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1be:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1c2:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1c6:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 1ca:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 1ce:	08 95       	ret

000001d0 <_GLOBAL__sub_I_button>:

Motor pwm_motor(const uint8_t PIN)
{
	Motor self(PIN);
	return self;
 1d0:	6f ef       	ldi	r22, 0xFF	; 255
 1d2:	7f ef       	ldi	r23, 0xFF	; 255
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z41__static_initialization_and_destruction_0ii>
 1dc:	08 95       	ret

000001de <main>:
#include "header.h"


int main(void)
{
    init_GPIO();
 1de:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z9init_GPIOv>
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <main+0x4>

000001e4 <_ZN5MotorC1Eh>:
#include "GPIO.h"

Motor::Motor(const uint8_t PIN)
 1e4:	fc 01       	movw	r30, r24
#define DISABLE_TIMER1 TIMSK1 = 0x00
#define DISABLE_TIMER2 TIMSK2 = 0x00

enum class PWM_Period { ON, OFF };

class GPIO
 1e6:	10 82       	st	Z, r1
 1e8:	12 82       	std	Z+2, r1	; 0x02
 1ea:	11 82       	std	Z+1, r1	; 0x01
 1ec:	13 82       	std	Z+3, r1	; 0x03
 1ee:	14 82       	std	Z+4, r1	; 0x04
 1f0:	15 82       	std	Z+5, r1	; 0x05
{
	if(PIN >=0 && PIN <= 7)
 1f2:	68 30       	cpi	r22, 0x08	; 8
 1f4:	80 f4       	brcc	.+32     	; 0x216 <_ZN5MotorC1Eh+0x32>
	{
		this->io_port = IO_port::D;
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	92 83       	std	Z+2, r25	; 0x02
 1fc:	81 83       	std	Z+1, r24	; 0x01
		this->PIN = PIN;
 1fe:	60 83       	st	Z, r22
		SET(DDRD, this->PIN);
 200:	2a b1       	in	r18, 0x0a	; 10
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <_ZN5MotorC1Eh+0x28>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <_ZN5MotorC1Eh+0x24>
 210:	82 2b       	or	r24, r18
 212:	8a b9       	out	0x0a, r24	; 10
 214:	08 95       	ret
	}
	else if (PIN >= 8 && PIN <= 13)
 216:	68 50       	subi	r22, 0x08	; 8
 218:	66 30       	cpi	r22, 0x06	; 6
 21a:	68 f4       	brcc	.+26     	; 0x236 <_ZN5MotorC1Eh+0x52>
	{
		this->io_port = IO_port::B;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	92 83       	std	Z+2, r25	; 0x02
 222:	81 83       	std	Z+1, r24	; 0x01
		this->PIN = PIN - 8;
 224:	60 83       	st	Z, r22
		SET (DDRB, this->PIN);
 226:	24 b1       	in	r18, 0x04	; 4
 228:	02 c0       	rjmp	.+4      	; 0x22e <_ZN5MotorC1Eh+0x4a>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <_ZN5MotorC1Eh+0x46>
 232:	82 2b       	or	r24, r18
 234:	84 b9       	out	0x04, r24	; 4
 236:	08 95       	ret

00000238 <__tablejump2__>:
 238:	ee 0f       	add	r30, r30
 23a:	ff 1f       	adc	r31, r31
 23c:	05 90       	lpm	r0, Z+
 23e:	f4 91       	lpm	r31, Z
 240:	e0 2d       	mov	r30, r0
 242:	09 94       	ijmp

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
