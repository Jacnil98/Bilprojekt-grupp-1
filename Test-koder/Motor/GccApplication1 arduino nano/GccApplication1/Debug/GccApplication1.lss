
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000992  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f0  00000000  00000000  00001092  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000462  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000450  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015f  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "header.h" //Inkluderar egen headerfil

//Funktionen main där programmet startar defineras.
int main()
{
	setup(); //Anroppar funktionen main för initiera mikrodatorn.
  80:	0e 94 ce 00 	call	0x19c	; 0x19c <setup>
	while (true) //Skapar en while sats so ska exekverar tills att programmet stängs av.
	{
		PWM(); //I while satsen så anropas PWM funktionen.
  84:	0e 94 66 00 	call	0xcc	; 0xcc <PWM>
  88:	fd cf       	rjmp	.-6      	; 0x84 <main+0x4>

0000008a <ADC_read>:
När AD-omvandligen är slutförd så ettställs biten ADIF. Sedan
retuneras resultatet från omvandlingen.
*************************************************************/
static uint16_t	ADC_read(const uint8_t PIN)
{
	ADMUX = ((1 << REFS0) | PIN);
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = ((1 << ADEN) | (1 << ADSC) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
  90:	87 ec       	ldi	r24, 0xC7	; 199
  92:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	while ((ADCSRA & (1 << ADIF)) == 0) ;
  96:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9a:	84 ff       	sbrs	r24, 4
  9c:	fc cf       	rjmp	.-8      	; 0x96 <ADC_read+0xc>
	ADCSRA = (1 << ADIF);
  9e:	80 e1       	ldi	r24, 0x10	; 16
  a0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	return ADC;
  a4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  a8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  ac:	08 95       	ret

000000ae <delay>:
sats används för att räkna fördröjningen i millisekunder.
*************************************************************/

static void delay(const uint16_t delay_time)
{
	for (uint16_t i = 0; i < delay_time; i++)
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	08 c0       	rjmp	.+16     	; 0xc4 <delay+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	e7 e8       	ldi	r30, 0x87	; 135
  b6:	f3 e1       	ldi	r31, 0x13	; 19
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <delay+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <delay+0x10>
  be:	00 00       	nop
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	28 17       	cp	r18, r24
  c6:	39 07       	cpc	r19, r25
  c8:	a8 f3       	brcs	.-22     	; 0xb4 <delay+0x6>
	_delay_ms(1);
	return;
  ca:	08 95       	ret

000000cc <PWM>:
gör att de kan justeras.
*************************************************************/


void PWM()
{
  cc:	cf 93       	push	r28
	const uint16_t direction = ADC_read(DIRECTION);
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 45 00 	call	0x8a	; 0x8a <ADC_read>
	
	if (direction < 400)
  d4:	80 39       	cpi	r24, 0x90	; 144
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	92 07       	cpc	r25, r18
  da:	38 f4       	brcc	.+14     	; 0xea <PWM+0x1e>
	{
		IN1_OFF; // Stänger av IN1.
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	8f 77       	andi	r24, 0x7F	; 127
  e0:	8b b9       	out	0x0b, r24	; 11
		IN2_ON;
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	85 b9       	out	0x05, r24	; 5
  e8:	16 c0       	rjmp	.+44     	; 0x116 <PWM+0x4a>
	}
	
	else if (direction >= 400 && direction <= 600)
  ea:	9c 01       	movw	r18, r24
  ec:	20 59       	subi	r18, 0x90	; 144
  ee:	31 40       	sbci	r19, 0x01	; 1
  f0:	29 3c       	cpi	r18, 0xC9	; 201
  f2:	31 05       	cpc	r19, r1
  f4:	38 f4       	brcc	.+14     	; 0x104 <PWM+0x38>
	{
		
		IN1_OFF;
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 77       	andi	r24, 0x7F	; 127
  fa:	8b b9       	out	0x0b, r24	; 11
		IN2_OFF;
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	85 b9       	out	0x05, r24	; 5
 102:	09 c0       	rjmp	.+18     	; 0x116 <PWM+0x4a>
	}
	
	else if (direction > 600)
 104:	89 35       	cpi	r24, 0x59	; 89
 106:	92 40       	sbci	r25, 0x02	; 2
 108:	30 f0       	brcs	.+12     	; 0x116 <PWM+0x4a>
	{
		IN1_ON;
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	8b b9       	out	0x0b, r24	; 11
		IN2_OFF;
 110:	85 b1       	in	r24, 0x05	; 5
 112:	8e 7f       	andi	r24, 0xFE	; 254
 114:	85 b9       	out	0x05, r24	; 5
	}
	
	const uint16_t speed = ADC_read(SPEED);
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 45 00 	call	0x8a	; 0x8a <ADC_read>
	const float duty_cycle = (float)speed / (ADC_MAX); // *5 kan behövas korrigeras, även vid test av servo
 11c:	bc 01       	movw	r22, r24
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__floatunsisf>
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 ec       	ldi	r19, 0xC0	; 192
 12a:	4f e7       	ldi	r20, 0x7F	; 127
 12c:	54 e4       	ldi	r21, 0x44	; 68
 12e:	0e 94 40 01 	call	0x280	; 0x280 <__divsf3>
	const uint8_t on_time = (uint8_t )(duty_cycle * PERIOD + 0.5);
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	40 e2       	ldi	r20, 0x20	; 32
 138:	51 e4       	ldi	r21, 0x41	; 65
 13a:	0e 94 6f 02 	call	0x4de	; 0x4de <__mulsf3>
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	5f e3       	ldi	r21, 0x3F	; 63
 146:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__addsf3>
 14a:	0e 94 b2 01 	call	0x364	; 0x364 <__fixunssfsi>
	const uint8_t off_time = PERIOD - on_time;
 14e:	ca e0       	ldi	r28, 0x0A	; 10
 150:	c6 1b       	sub	r28, r22
	
	MOTOR_ON;
 152:	9b b1       	in	r25, 0x0b	; 11
 154:	90 62       	ori	r25, 0x20	; 32
 156:	9b b9       	out	0x0b, r25	; 11
	delay(on_time);
 158:	86 2f       	mov	r24, r22
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 57 00 	call	0xae	; 0xae <delay>
	MOTOR_OFF;
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	8f 7d       	andi	r24, 0xDF	; 223
 164:	8b b9       	out	0x0b, r24	; 11
	delay(off_time);
 166:	8c 2f       	mov	r24, r28
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 57 00 	call	0xae	; 0xae <delay>
	return;
}
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <init_ports>:
B/D). Sedan sätts de olika knapparna till inportar med hjälp
av registret PORT(B/D).
*************************************************************/
static void init_ports()
{
	DDRD = (1 << IN1);
 172:	80 e8       	ldi	r24, 0x80	; 128
 174:	8a b9       	out	0x0a, r24	; 10
	DDRB = (1 << IN2);
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	84 b9       	out	0x04, r24	; 4
	DDRD = (1 << MOTOR);
 17a:	80 e2       	ldi	r24, 0x20	; 32
 17c:	8a b9       	out	0x0a, r24	; 10
 17e:	08 95       	ret

00000180 <init_ADC>:
Till sist så ett ställfs biten ADIF(ADC Interrupt Flag) som
indikerar när AD-omvanldingen är slutförd.
*************************************************************/
static void init_ADC()
{
	ADMUX = (1 << REFS0);
 180:	80 e4       	ldi	r24, 0x40	; 64
 182:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = ((1 << ADEN) | (1 << ADSC) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
 186:	87 ec       	ldi	r24, 0xC7	; 199
 188:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	while ((ADCSRA & (1 << ADIF)) == 0) ;
 18c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 190:	84 ff       	sbrs	r24, 4
 192:	fc cf       	rjmp	.-8      	; 0x18c <init_ADC+0xc>
	ADCSRA = (1 << ADIF);
 194:	80 e1       	ldi	r24, 0x10	; 16
 196:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 19a:	08 95       	ret

0000019c <setup>:
static void init_ADC();

//Definerar setup funktionen.
void setup()
{
	init_ports();
 19c:	0e 94 b9 00 	call	0x172	; 0x172 <init_ports>
	init_ADC();
 1a0:	0e 94 c0 00 	call	0x180	; 0x180 <init_ADC>
 1a4:	08 95       	ret

000001a6 <__subsf3>:
 1a6:	50 58       	subi	r21, 0x80	; 128

000001a8 <__addsf3>:
 1a8:	bb 27       	eor	r27, r27
 1aa:	aa 27       	eor	r26, r26
 1ac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <__addsf3x>
 1b0:	0c 94 35 02 	jmp	0x46a	; 0x46a <__fp_round>
 1b4:	0e 94 27 02 	call	0x44e	; 0x44e <__fp_pscA>
 1b8:	38 f0       	brcs	.+14     	; 0x1c8 <__addsf3+0x20>
 1ba:	0e 94 2e 02 	call	0x45c	; 0x45c <__fp_pscB>
 1be:	20 f0       	brcs	.+8      	; 0x1c8 <__addsf3+0x20>
 1c0:	39 f4       	brne	.+14     	; 0x1d0 <__addsf3+0x28>
 1c2:	9f 3f       	cpi	r25, 0xFF	; 255
 1c4:	19 f4       	brne	.+6      	; 0x1cc <__addsf3+0x24>
 1c6:	26 f4       	brtc	.+8      	; 0x1d0 <__addsf3+0x28>
 1c8:	0c 94 24 02 	jmp	0x448	; 0x448 <__fp_nan>
 1cc:	0e f4       	brtc	.+2      	; 0x1d0 <__addsf3+0x28>
 1ce:	e0 95       	com	r30
 1d0:	e7 fb       	bst	r30, 7
 1d2:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__fp_inf>

000001d6 <__addsf3x>:
 1d6:	e9 2f       	mov	r30, r25
 1d8:	0e 94 46 02 	call	0x48c	; 0x48c <__fp_split3>
 1dc:	58 f3       	brcs	.-42     	; 0x1b4 <__addsf3+0xc>
 1de:	ba 17       	cp	r27, r26
 1e0:	62 07       	cpc	r22, r18
 1e2:	73 07       	cpc	r23, r19
 1e4:	84 07       	cpc	r24, r20
 1e6:	95 07       	cpc	r25, r21
 1e8:	20 f0       	brcs	.+8      	; 0x1f2 <__addsf3x+0x1c>
 1ea:	79 f4       	brne	.+30     	; 0x20a <__addsf3x+0x34>
 1ec:	a6 f5       	brtc	.+104    	; 0x256 <__addsf3x+0x80>
 1ee:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__fp_zero>
 1f2:	0e f4       	brtc	.+2      	; 0x1f6 <__addsf3x+0x20>
 1f4:	e0 95       	com	r30
 1f6:	0b 2e       	mov	r0, r27
 1f8:	ba 2f       	mov	r27, r26
 1fa:	a0 2d       	mov	r26, r0
 1fc:	0b 01       	movw	r0, r22
 1fe:	b9 01       	movw	r22, r18
 200:	90 01       	movw	r18, r0
 202:	0c 01       	movw	r0, r24
 204:	ca 01       	movw	r24, r20
 206:	a0 01       	movw	r20, r0
 208:	11 24       	eor	r1, r1
 20a:	ff 27       	eor	r31, r31
 20c:	59 1b       	sub	r21, r25
 20e:	99 f0       	breq	.+38     	; 0x236 <__addsf3x+0x60>
 210:	59 3f       	cpi	r21, 0xF9	; 249
 212:	50 f4       	brcc	.+20     	; 0x228 <__addsf3x+0x52>
 214:	50 3e       	cpi	r21, 0xE0	; 224
 216:	68 f1       	brcs	.+90     	; 0x272 <__addsf3x+0x9c>
 218:	1a 16       	cp	r1, r26
 21a:	f0 40       	sbci	r31, 0x00	; 0
 21c:	a2 2f       	mov	r26, r18
 21e:	23 2f       	mov	r18, r19
 220:	34 2f       	mov	r19, r20
 222:	44 27       	eor	r20, r20
 224:	58 5f       	subi	r21, 0xF8	; 248
 226:	f3 cf       	rjmp	.-26     	; 0x20e <__addsf3x+0x38>
 228:	46 95       	lsr	r20
 22a:	37 95       	ror	r19
 22c:	27 95       	ror	r18
 22e:	a7 95       	ror	r26
 230:	f0 40       	sbci	r31, 0x00	; 0
 232:	53 95       	inc	r21
 234:	c9 f7       	brne	.-14     	; 0x228 <__addsf3x+0x52>
 236:	7e f4       	brtc	.+30     	; 0x256 <__addsf3x+0x80>
 238:	1f 16       	cp	r1, r31
 23a:	ba 0b       	sbc	r27, r26
 23c:	62 0b       	sbc	r22, r18
 23e:	73 0b       	sbc	r23, r19
 240:	84 0b       	sbc	r24, r20
 242:	ba f0       	brmi	.+46     	; 0x272 <__addsf3x+0x9c>
 244:	91 50       	subi	r25, 0x01	; 1
 246:	a1 f0       	breq	.+40     	; 0x270 <__addsf3x+0x9a>
 248:	ff 0f       	add	r31, r31
 24a:	bb 1f       	adc	r27, r27
 24c:	66 1f       	adc	r22, r22
 24e:	77 1f       	adc	r23, r23
 250:	88 1f       	adc	r24, r24
 252:	c2 f7       	brpl	.-16     	; 0x244 <__addsf3x+0x6e>
 254:	0e c0       	rjmp	.+28     	; 0x272 <__addsf3x+0x9c>
 256:	ba 0f       	add	r27, r26
 258:	62 1f       	adc	r22, r18
 25a:	73 1f       	adc	r23, r19
 25c:	84 1f       	adc	r24, r20
 25e:	48 f4       	brcc	.+18     	; 0x272 <__addsf3x+0x9c>
 260:	87 95       	ror	r24
 262:	77 95       	ror	r23
 264:	67 95       	ror	r22
 266:	b7 95       	ror	r27
 268:	f7 95       	ror	r31
 26a:	9e 3f       	cpi	r25, 0xFE	; 254
 26c:	08 f0       	brcs	.+2      	; 0x270 <__addsf3x+0x9a>
 26e:	b0 cf       	rjmp	.-160    	; 0x1d0 <__addsf3+0x28>
 270:	93 95       	inc	r25
 272:	88 0f       	add	r24, r24
 274:	08 f0       	brcs	.+2      	; 0x278 <__addsf3x+0xa2>
 276:	99 27       	eor	r25, r25
 278:	ee 0f       	add	r30, r30
 27a:	97 95       	ror	r25
 27c:	87 95       	ror	r24
 27e:	08 95       	ret

00000280 <__divsf3>:
 280:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__divsf3x>
 284:	0c 94 35 02 	jmp	0x46a	; 0x46a <__fp_round>
 288:	0e 94 2e 02 	call	0x45c	; 0x45c <__fp_pscB>
 28c:	58 f0       	brcs	.+22     	; 0x2a4 <__divsf3+0x24>
 28e:	0e 94 27 02 	call	0x44e	; 0x44e <__fp_pscA>
 292:	40 f0       	brcs	.+16     	; 0x2a4 <__divsf3+0x24>
 294:	29 f4       	brne	.+10     	; 0x2a0 <__divsf3+0x20>
 296:	5f 3f       	cpi	r21, 0xFF	; 255
 298:	29 f0       	breq	.+10     	; 0x2a4 <__divsf3+0x24>
 29a:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__fp_inf>
 29e:	51 11       	cpse	r21, r1
 2a0:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__fp_szero>
 2a4:	0c 94 24 02 	jmp	0x448	; 0x448 <__fp_nan>

000002a8 <__divsf3x>:
 2a8:	0e 94 46 02 	call	0x48c	; 0x48c <__fp_split3>
 2ac:	68 f3       	brcs	.-38     	; 0x288 <__divsf3+0x8>

000002ae <__divsf3_pse>:
 2ae:	99 23       	and	r25, r25
 2b0:	b1 f3       	breq	.-20     	; 0x29e <__divsf3+0x1e>
 2b2:	55 23       	and	r21, r21
 2b4:	91 f3       	breq	.-28     	; 0x29a <__divsf3+0x1a>
 2b6:	95 1b       	sub	r25, r21
 2b8:	55 0b       	sbc	r21, r21
 2ba:	bb 27       	eor	r27, r27
 2bc:	aa 27       	eor	r26, r26
 2be:	62 17       	cp	r22, r18
 2c0:	73 07       	cpc	r23, r19
 2c2:	84 07       	cpc	r24, r20
 2c4:	38 f0       	brcs	.+14     	; 0x2d4 <__divsf3_pse+0x26>
 2c6:	9f 5f       	subi	r25, 0xFF	; 255
 2c8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ca:	22 0f       	add	r18, r18
 2cc:	33 1f       	adc	r19, r19
 2ce:	44 1f       	adc	r20, r20
 2d0:	aa 1f       	adc	r26, r26
 2d2:	a9 f3       	breq	.-22     	; 0x2be <__divsf3_pse+0x10>
 2d4:	35 d0       	rcall	.+106    	; 0x340 <__divsf3_pse+0x92>
 2d6:	0e 2e       	mov	r0, r30
 2d8:	3a f0       	brmi	.+14     	; 0x2e8 <__divsf3_pse+0x3a>
 2da:	e0 e8       	ldi	r30, 0x80	; 128
 2dc:	32 d0       	rcall	.+100    	; 0x342 <__divsf3_pse+0x94>
 2de:	91 50       	subi	r25, 0x01	; 1
 2e0:	50 40       	sbci	r21, 0x00	; 0
 2e2:	e6 95       	lsr	r30
 2e4:	00 1c       	adc	r0, r0
 2e6:	ca f7       	brpl	.-14     	; 0x2da <__divsf3_pse+0x2c>
 2e8:	2b d0       	rcall	.+86     	; 0x340 <__divsf3_pse+0x92>
 2ea:	fe 2f       	mov	r31, r30
 2ec:	29 d0       	rcall	.+82     	; 0x340 <__divsf3_pse+0x92>
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	88 1f       	adc	r24, r24
 2f4:	bb 1f       	adc	r27, r27
 2f6:	26 17       	cp	r18, r22
 2f8:	37 07       	cpc	r19, r23
 2fa:	48 07       	cpc	r20, r24
 2fc:	ab 07       	cpc	r26, r27
 2fe:	b0 e8       	ldi	r27, 0x80	; 128
 300:	09 f0       	breq	.+2      	; 0x304 <__divsf3_pse+0x56>
 302:	bb 0b       	sbc	r27, r27
 304:	80 2d       	mov	r24, r0
 306:	bf 01       	movw	r22, r30
 308:	ff 27       	eor	r31, r31
 30a:	93 58       	subi	r25, 0x83	; 131
 30c:	5f 4f       	sbci	r21, 0xFF	; 255
 30e:	3a f0       	brmi	.+14     	; 0x31e <__divsf3_pse+0x70>
 310:	9e 3f       	cpi	r25, 0xFE	; 254
 312:	51 05       	cpc	r21, r1
 314:	78 f0       	brcs	.+30     	; 0x334 <__divsf3_pse+0x86>
 316:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__fp_inf>
 31a:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__fp_szero>
 31e:	5f 3f       	cpi	r21, 0xFF	; 255
 320:	e4 f3       	brlt	.-8      	; 0x31a <__divsf3_pse+0x6c>
 322:	98 3e       	cpi	r25, 0xE8	; 232
 324:	d4 f3       	brlt	.-12     	; 0x31a <__divsf3_pse+0x6c>
 326:	86 95       	lsr	r24
 328:	77 95       	ror	r23
 32a:	67 95       	ror	r22
 32c:	b7 95       	ror	r27
 32e:	f7 95       	ror	r31
 330:	9f 5f       	subi	r25, 0xFF	; 255
 332:	c9 f7       	brne	.-14     	; 0x326 <__divsf3_pse+0x78>
 334:	88 0f       	add	r24, r24
 336:	91 1d       	adc	r25, r1
 338:	96 95       	lsr	r25
 33a:	87 95       	ror	r24
 33c:	97 f9       	bld	r25, 7
 33e:	08 95       	ret
 340:	e1 e0       	ldi	r30, 0x01	; 1
 342:	66 0f       	add	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	88 1f       	adc	r24, r24
 348:	bb 1f       	adc	r27, r27
 34a:	62 17       	cp	r22, r18
 34c:	73 07       	cpc	r23, r19
 34e:	84 07       	cpc	r24, r20
 350:	ba 07       	cpc	r27, r26
 352:	20 f0       	brcs	.+8      	; 0x35c <__divsf3_pse+0xae>
 354:	62 1b       	sub	r22, r18
 356:	73 0b       	sbc	r23, r19
 358:	84 0b       	sbc	r24, r20
 35a:	ba 0b       	sbc	r27, r26
 35c:	ee 1f       	adc	r30, r30
 35e:	88 f7       	brcc	.-30     	; 0x342 <__divsf3_pse+0x94>
 360:	e0 95       	com	r30
 362:	08 95       	ret

00000364 <__fixunssfsi>:
 364:	0e 94 4e 02 	call	0x49c	; 0x49c <__fp_splitA>
 368:	88 f0       	brcs	.+34     	; 0x38c <__fixunssfsi+0x28>
 36a:	9f 57       	subi	r25, 0x7F	; 127
 36c:	98 f0       	brcs	.+38     	; 0x394 <__fixunssfsi+0x30>
 36e:	b9 2f       	mov	r27, r25
 370:	99 27       	eor	r25, r25
 372:	b7 51       	subi	r27, 0x17	; 23
 374:	b0 f0       	brcs	.+44     	; 0x3a2 <__fixunssfsi+0x3e>
 376:	e1 f0       	breq	.+56     	; 0x3b0 <__fixunssfsi+0x4c>
 378:	66 0f       	add	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	88 1f       	adc	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	1a f0       	brmi	.+6      	; 0x388 <__fixunssfsi+0x24>
 382:	ba 95       	dec	r27
 384:	c9 f7       	brne	.-14     	; 0x378 <__fixunssfsi+0x14>
 386:	14 c0       	rjmp	.+40     	; 0x3b0 <__fixunssfsi+0x4c>
 388:	b1 30       	cpi	r27, 0x01	; 1
 38a:	91 f0       	breq	.+36     	; 0x3b0 <__fixunssfsi+0x4c>
 38c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__fp_zero>
 390:	b1 e0       	ldi	r27, 0x01	; 1
 392:	08 95       	ret
 394:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__fp_zero>
 398:	67 2f       	mov	r22, r23
 39a:	78 2f       	mov	r23, r24
 39c:	88 27       	eor	r24, r24
 39e:	b8 5f       	subi	r27, 0xF8	; 248
 3a0:	39 f0       	breq	.+14     	; 0x3b0 <__fixunssfsi+0x4c>
 3a2:	b9 3f       	cpi	r27, 0xF9	; 249
 3a4:	cc f3       	brlt	.-14     	; 0x398 <__fixunssfsi+0x34>
 3a6:	86 95       	lsr	r24
 3a8:	77 95       	ror	r23
 3aa:	67 95       	ror	r22
 3ac:	b3 95       	inc	r27
 3ae:	d9 f7       	brne	.-10     	; 0x3a6 <__fixunssfsi+0x42>
 3b0:	3e f4       	brtc	.+14     	; 0x3c0 <__fixunssfsi+0x5c>
 3b2:	90 95       	com	r25
 3b4:	80 95       	com	r24
 3b6:	70 95       	com	r23
 3b8:	61 95       	neg	r22
 3ba:	7f 4f       	sbci	r23, 0xFF	; 255
 3bc:	8f 4f       	sbci	r24, 0xFF	; 255
 3be:	9f 4f       	sbci	r25, 0xFF	; 255
 3c0:	08 95       	ret

000003c2 <__floatunsisf>:
 3c2:	e8 94       	clt
 3c4:	09 c0       	rjmp	.+18     	; 0x3d8 <__floatsisf+0x12>

000003c6 <__floatsisf>:
 3c6:	97 fb       	bst	r25, 7
 3c8:	3e f4       	brtc	.+14     	; 0x3d8 <__floatsisf+0x12>
 3ca:	90 95       	com	r25
 3cc:	80 95       	com	r24
 3ce:	70 95       	com	r23
 3d0:	61 95       	neg	r22
 3d2:	7f 4f       	sbci	r23, 0xFF	; 255
 3d4:	8f 4f       	sbci	r24, 0xFF	; 255
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	99 23       	and	r25, r25
 3da:	a9 f0       	breq	.+42     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3dc:	f9 2f       	mov	r31, r25
 3de:	96 e9       	ldi	r25, 0x96	; 150
 3e0:	bb 27       	eor	r27, r27
 3e2:	93 95       	inc	r25
 3e4:	f6 95       	lsr	r31
 3e6:	87 95       	ror	r24
 3e8:	77 95       	ror	r23
 3ea:	67 95       	ror	r22
 3ec:	b7 95       	ror	r27
 3ee:	f1 11       	cpse	r31, r1
 3f0:	f8 cf       	rjmp	.-16     	; 0x3e2 <__floatsisf+0x1c>
 3f2:	fa f4       	brpl	.+62     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 3f4:	bb 0f       	add	r27, r27
 3f6:	11 f4       	brne	.+4      	; 0x3fc <__floatsisf+0x36>
 3f8:	60 ff       	sbrs	r22, 0
 3fa:	1b c0       	rjmp	.+54     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 3fc:	6f 5f       	subi	r22, 0xFF	; 255
 3fe:	7f 4f       	sbci	r23, 0xFF	; 255
 400:	8f 4f       	sbci	r24, 0xFF	; 255
 402:	9f 4f       	sbci	r25, 0xFF	; 255
 404:	16 c0       	rjmp	.+44     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 406:	88 23       	and	r24, r24
 408:	11 f0       	breq	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	96 e9       	ldi	r25, 0x96	; 150
 40c:	11 c0       	rjmp	.+34     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 40e:	77 23       	and	r23, r23
 410:	21 f0       	breq	.+8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 412:	9e e8       	ldi	r25, 0x8E	; 142
 414:	87 2f       	mov	r24, r23
 416:	76 2f       	mov	r23, r22
 418:	05 c0       	rjmp	.+10     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 41a:	66 23       	and	r22, r22
 41c:	71 f0       	breq	.+28     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 41e:	96 e8       	ldi	r25, 0x86	; 134
 420:	86 2f       	mov	r24, r22
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	2a f0       	brmi	.+10     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 428:	9a 95       	dec	r25
 42a:	66 0f       	add	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	88 1f       	adc	r24, r24
 430:	da f7       	brpl	.-10     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 432:	88 0f       	add	r24, r24
 434:	96 95       	lsr	r25
 436:	87 95       	ror	r24
 438:	97 f9       	bld	r25, 7
 43a:	08 95       	ret

0000043c <__fp_inf>:
 43c:	97 f9       	bld	r25, 7
 43e:	9f 67       	ori	r25, 0x7F	; 127
 440:	80 e8       	ldi	r24, 0x80	; 128
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	08 95       	ret

00000448 <__fp_nan>:
 448:	9f ef       	ldi	r25, 0xFF	; 255
 44a:	80 ec       	ldi	r24, 0xC0	; 192
 44c:	08 95       	ret

0000044e <__fp_pscA>:
 44e:	00 24       	eor	r0, r0
 450:	0a 94       	dec	r0
 452:	16 16       	cp	r1, r22
 454:	17 06       	cpc	r1, r23
 456:	18 06       	cpc	r1, r24
 458:	09 06       	cpc	r0, r25
 45a:	08 95       	ret

0000045c <__fp_pscB>:
 45c:	00 24       	eor	r0, r0
 45e:	0a 94       	dec	r0
 460:	12 16       	cp	r1, r18
 462:	13 06       	cpc	r1, r19
 464:	14 06       	cpc	r1, r20
 466:	05 06       	cpc	r0, r21
 468:	08 95       	ret

0000046a <__fp_round>:
 46a:	09 2e       	mov	r0, r25
 46c:	03 94       	inc	r0
 46e:	00 0c       	add	r0, r0
 470:	11 f4       	brne	.+4      	; 0x476 <__fp_round+0xc>
 472:	88 23       	and	r24, r24
 474:	52 f0       	brmi	.+20     	; 0x48a <__fp_round+0x20>
 476:	bb 0f       	add	r27, r27
 478:	40 f4       	brcc	.+16     	; 0x48a <__fp_round+0x20>
 47a:	bf 2b       	or	r27, r31
 47c:	11 f4       	brne	.+4      	; 0x482 <__fp_round+0x18>
 47e:	60 ff       	sbrs	r22, 0
 480:	04 c0       	rjmp	.+8      	; 0x48a <__fp_round+0x20>
 482:	6f 5f       	subi	r22, 0xFF	; 255
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	8f 4f       	sbci	r24, 0xFF	; 255
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	08 95       	ret

0000048c <__fp_split3>:
 48c:	57 fd       	sbrc	r21, 7
 48e:	90 58       	subi	r25, 0x80	; 128
 490:	44 0f       	add	r20, r20
 492:	55 1f       	adc	r21, r21
 494:	59 f0       	breq	.+22     	; 0x4ac <__fp_splitA+0x10>
 496:	5f 3f       	cpi	r21, 0xFF	; 255
 498:	71 f0       	breq	.+28     	; 0x4b6 <__fp_splitA+0x1a>
 49a:	47 95       	ror	r20

0000049c <__fp_splitA>:
 49c:	88 0f       	add	r24, r24
 49e:	97 fb       	bst	r25, 7
 4a0:	99 1f       	adc	r25, r25
 4a2:	61 f0       	breq	.+24     	; 0x4bc <__fp_splitA+0x20>
 4a4:	9f 3f       	cpi	r25, 0xFF	; 255
 4a6:	79 f0       	breq	.+30     	; 0x4c6 <__fp_splitA+0x2a>
 4a8:	87 95       	ror	r24
 4aa:	08 95       	ret
 4ac:	12 16       	cp	r1, r18
 4ae:	13 06       	cpc	r1, r19
 4b0:	14 06       	cpc	r1, r20
 4b2:	55 1f       	adc	r21, r21
 4b4:	f2 cf       	rjmp	.-28     	; 0x49a <__fp_split3+0xe>
 4b6:	46 95       	lsr	r20
 4b8:	f1 df       	rcall	.-30     	; 0x49c <__fp_splitA>
 4ba:	08 c0       	rjmp	.+16     	; 0x4cc <__fp_splitA+0x30>
 4bc:	16 16       	cp	r1, r22
 4be:	17 06       	cpc	r1, r23
 4c0:	18 06       	cpc	r1, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	f1 cf       	rjmp	.-30     	; 0x4a8 <__fp_splitA+0xc>
 4c6:	86 95       	lsr	r24
 4c8:	71 05       	cpc	r23, r1
 4ca:	61 05       	cpc	r22, r1
 4cc:	08 94       	sec
 4ce:	08 95       	ret

000004d0 <__fp_zero>:
 4d0:	e8 94       	clt

000004d2 <__fp_szero>:
 4d2:	bb 27       	eor	r27, r27
 4d4:	66 27       	eor	r22, r22
 4d6:	77 27       	eor	r23, r23
 4d8:	cb 01       	movw	r24, r22
 4da:	97 f9       	bld	r25, 7
 4dc:	08 95       	ret

000004de <__mulsf3>:
 4de:	0e 94 82 02 	call	0x504	; 0x504 <__mulsf3x>
 4e2:	0c 94 35 02 	jmp	0x46a	; 0x46a <__fp_round>
 4e6:	0e 94 27 02 	call	0x44e	; 0x44e <__fp_pscA>
 4ea:	38 f0       	brcs	.+14     	; 0x4fa <__mulsf3+0x1c>
 4ec:	0e 94 2e 02 	call	0x45c	; 0x45c <__fp_pscB>
 4f0:	20 f0       	brcs	.+8      	; 0x4fa <__mulsf3+0x1c>
 4f2:	95 23       	and	r25, r21
 4f4:	11 f0       	breq	.+4      	; 0x4fa <__mulsf3+0x1c>
 4f6:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__fp_inf>
 4fa:	0c 94 24 02 	jmp	0x448	; 0x448 <__fp_nan>
 4fe:	11 24       	eor	r1, r1
 500:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__fp_szero>

00000504 <__mulsf3x>:
 504:	0e 94 46 02 	call	0x48c	; 0x48c <__fp_split3>
 508:	70 f3       	brcs	.-36     	; 0x4e6 <__mulsf3+0x8>

0000050a <__mulsf3_pse>:
 50a:	95 9f       	mul	r25, r21
 50c:	c1 f3       	breq	.-16     	; 0x4fe <__mulsf3+0x20>
 50e:	95 0f       	add	r25, r21
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	55 1f       	adc	r21, r21
 514:	62 9f       	mul	r22, r18
 516:	f0 01       	movw	r30, r0
 518:	72 9f       	mul	r23, r18
 51a:	bb 27       	eor	r27, r27
 51c:	f0 0d       	add	r31, r0
 51e:	b1 1d       	adc	r27, r1
 520:	63 9f       	mul	r22, r19
 522:	aa 27       	eor	r26, r26
 524:	f0 0d       	add	r31, r0
 526:	b1 1d       	adc	r27, r1
 528:	aa 1f       	adc	r26, r26
 52a:	64 9f       	mul	r22, r20
 52c:	66 27       	eor	r22, r22
 52e:	b0 0d       	add	r27, r0
 530:	a1 1d       	adc	r26, r1
 532:	66 1f       	adc	r22, r22
 534:	82 9f       	mul	r24, r18
 536:	22 27       	eor	r18, r18
 538:	b0 0d       	add	r27, r0
 53a:	a1 1d       	adc	r26, r1
 53c:	62 1f       	adc	r22, r18
 53e:	73 9f       	mul	r23, r19
 540:	b0 0d       	add	r27, r0
 542:	a1 1d       	adc	r26, r1
 544:	62 1f       	adc	r22, r18
 546:	83 9f       	mul	r24, r19
 548:	a0 0d       	add	r26, r0
 54a:	61 1d       	adc	r22, r1
 54c:	22 1f       	adc	r18, r18
 54e:	74 9f       	mul	r23, r20
 550:	33 27       	eor	r19, r19
 552:	a0 0d       	add	r26, r0
 554:	61 1d       	adc	r22, r1
 556:	23 1f       	adc	r18, r19
 558:	84 9f       	mul	r24, r20
 55a:	60 0d       	add	r22, r0
 55c:	21 1d       	adc	r18, r1
 55e:	82 2f       	mov	r24, r18
 560:	76 2f       	mov	r23, r22
 562:	6a 2f       	mov	r22, r26
 564:	11 24       	eor	r1, r1
 566:	9f 57       	subi	r25, 0x7F	; 127
 568:	50 40       	sbci	r21, 0x00	; 0
 56a:	9a f0       	brmi	.+38     	; 0x592 <__mulsf3_pse+0x88>
 56c:	f1 f0       	breq	.+60     	; 0x5aa <__mulsf3_pse+0xa0>
 56e:	88 23       	and	r24, r24
 570:	4a f0       	brmi	.+18     	; 0x584 <__mulsf3_pse+0x7a>
 572:	ee 0f       	add	r30, r30
 574:	ff 1f       	adc	r31, r31
 576:	bb 1f       	adc	r27, r27
 578:	66 1f       	adc	r22, r22
 57a:	77 1f       	adc	r23, r23
 57c:	88 1f       	adc	r24, r24
 57e:	91 50       	subi	r25, 0x01	; 1
 580:	50 40       	sbci	r21, 0x00	; 0
 582:	a9 f7       	brne	.-22     	; 0x56e <__mulsf3_pse+0x64>
 584:	9e 3f       	cpi	r25, 0xFE	; 254
 586:	51 05       	cpc	r21, r1
 588:	80 f0       	brcs	.+32     	; 0x5aa <__mulsf3_pse+0xa0>
 58a:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__fp_inf>
 58e:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__fp_szero>
 592:	5f 3f       	cpi	r21, 0xFF	; 255
 594:	e4 f3       	brlt	.-8      	; 0x58e <__mulsf3_pse+0x84>
 596:	98 3e       	cpi	r25, 0xE8	; 232
 598:	d4 f3       	brlt	.-12     	; 0x58e <__mulsf3_pse+0x84>
 59a:	86 95       	lsr	r24
 59c:	77 95       	ror	r23
 59e:	67 95       	ror	r22
 5a0:	b7 95       	ror	r27
 5a2:	f7 95       	ror	r31
 5a4:	e7 95       	ror	r30
 5a6:	9f 5f       	subi	r25, 0xFF	; 255
 5a8:	c1 f7       	brne	.-16     	; 0x59a <__mulsf3_pse+0x90>
 5aa:	fe 2b       	or	r31, r30
 5ac:	88 0f       	add	r24, r24
 5ae:	91 1d       	adc	r25, r1
 5b0:	96 95       	lsr	r25
 5b2:	87 95       	ror	r24
 5b4:	97 f9       	bld	r25, 7
 5b6:	08 95       	ret

000005b8 <_exit>:
 5b8:	f8 94       	cli

000005ba <__stop_program>:
 5ba:	ff cf       	rjmp	.-2      	; 0x5ba <__stop_program>
