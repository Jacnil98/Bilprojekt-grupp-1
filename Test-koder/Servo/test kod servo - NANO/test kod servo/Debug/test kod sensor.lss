
test kod sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000940  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ef  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000399  00000000  00000000  0000174b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00001ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000436  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015e  00000000  00000000  00001fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
	#include "header.h"

	int main(void)
	{
		Setup();
  90:	0e 94 96 00 	call	0x12c	; 0x12c <Setup>
		//float f = 37.7777777;
		while (true) //Skapar en while sats so ska exekverar tills att programmet stängs av.
		{
			PWM(); //I while satsen så anropas PWM funktionen.
  94:	0e 94 9b 00 	call	0x136	; 0x136 <PWM>
  98:	fd cf       	rjmp	.-6      	; 0x94 <main+0x4>

0000009a <ADC_read>:
	return;
}

static uint32_t ADC_read()
{
	ADMUX = ((1 << REFS0) | POT);
  9a:	81 e4       	ldi	r24, 0x41	; 65
  9c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = ((1 << ADEN) | (1 << ADSC) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
  a0:	87 ec       	ldi	r24, 0xC7	; 199
  a2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	while ((ADCSRA & (1 << ADIF)) == 0) ;
  a6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  aa:	84 ff       	sbrs	r24, 4
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <ADC_read+0xc>
	ADCSRA = (1 << ADIF);
  ae:	80 e1       	ldi	r24, 0x10	; 16
  b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	return ADC;
  b4:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  b8:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
}
  c0:	08 95       	ret

000000c2 <init_ADC>:
	return;
}

static void init_ADC()
{
	ADMUX = (1 << REFS0);
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = ((1 << ADEN) | (1 << ADSC) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
  c8:	87 ec       	ldi	r24, 0xC7	; 199
  ca:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	while ((ADCSRA & (1 << ADIF)) == 0) ;
  ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d2:	84 ff       	sbrs	r24, 4
  d4:	fc cf       	rjmp	.-8      	; 0xce <init_ADC+0xc>
	ADCSRA = (1 << ADIF);
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  dc:	08 95       	ret

000000de <delay>:
	ADCSRA = (1 << ADIF);
	return ADC;
}

static void delay( uint32_t delay_time)
{
  de:	ab 01       	movw	r20, r22
  e0:	bc 01       	movw	r22, r24
	if (delay_time < 70)
  e2:	46 34       	cpi	r20, 0x46	; 70
  e4:	51 05       	cpc	r21, r1
  e6:	61 05       	cpc	r22, r1
  e8:	71 05       	cpc	r23, r1
  ea:	30 f0       	brcs	.+12     	; 0xf8 <delay+0x1a>
	{
		delay_time =  70;
	}
	else if (delay_time > 150)
  ec:	47 39       	cpi	r20, 0x97	; 151
  ee:	51 05       	cpc	r21, r1
  f0:	61 05       	cpc	r22, r1
  f2:	71 05       	cpc	r23, r1
  f4:	30 f4       	brcc	.+12     	; 0x102 <delay+0x24>
  f6:	09 c0       	rjmp	.+18     	; 0x10a <delay+0x2c>

static void delay( uint32_t delay_time)
{
	if (delay_time < 70)
	{
		delay_time =  70;
  f8:	46 e4       	ldi	r20, 0x46	; 70
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	04 c0       	rjmp	.+8      	; 0x10a <delay+0x2c>
	}
	else if (delay_time > 150)
	{
		delay_time=  150;
 102:	46 e9       	ldi	r20, 0x96	; 150
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	70 e0       	ldi	r23, 0x00	; 0
	}
	for (uint32_t i = 0; i < delay_time; i++)
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	dc 01       	movw	r26, r24
 110:	07 c0       	rjmp	.+14     	; 0x120 <delay+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	22 e4       	ldi	r18, 0x42	; 66
 114:	2a 95       	dec	r18
 116:	f1 f7       	brne	.-4      	; 0x114 <delay+0x36>
 118:	00 c0       	rjmp	.+0      	; 0x11a <delay+0x3c>
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	a1 1d       	adc	r26, r1
 11e:	b1 1d       	adc	r27, r1
 120:	84 17       	cp	r24, r20
 122:	95 07       	cpc	r25, r21
 124:	a6 07       	cpc	r26, r22
 126:	b7 07       	cpc	r27, r23
 128:	a0 f3       	brcs	.-24     	; 0x112 <delay+0x34>
	_delay_us(10);
	return;
}
 12a:	08 95       	ret

0000012c <Setup>:
static void delay( uint32_t delay_time);
static void init_ADC();

void Setup()
{
	DDRD = (1 << SERVO);
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	8a b9       	out	0x0a, r24	; 10
	init_ADC();
 130:	0e 94 61 00 	call	0xc2	; 0xc2 <init_ADC>
 134:	08 95       	ret

00000136 <PWM>:
}

void PWM()
{
 136:	cf 92       	push	r12
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
	const uint16_t ADC_result = ADC_read(POT);    // 1024
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 4d 00 	call	0x9a	; 0x9a <ADC_read>
	const float duty_cycle = (float)ADC_result / (ADC_MAX); // 0-1024/1024 = värde mellan 0 och 1
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__floatunsisf>
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e8       	ldi	r20, 0x80	; 128
 154:	5a e3       	ldi	r21, 0x3A	; 58
 156:	0e 94 0d 02 	call	0x41a	; 0x41a <__mulsf3>
	const uint32_t on_time = (float)((duty_cycle * PERIOD)* 100) / 100; // 0-1* 3= värde mellan 0-3
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	46 e9       	ldi	r20, 0x96	; 150
 160:	53 e4       	ldi	r21, 0x43	; 67
 162:	0e 94 0d 02 	call	0x41a	; 0x41a <__mulsf3>
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	48 ec       	ldi	r20, 0xC8	; 200
 16c:	52 e4       	ldi	r21, 0x42	; 66
 16e:	0e 94 0d 02 	call	0x41a	; 0x41a <__mulsf3>
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	48 ec       	ldi	r20, 0xC8	; 200
 178:	52 e4       	ldi	r21, 0x42	; 66
 17a:	0e 94 de 00 	call	0x1bc	; 0x1bc <__divsf3>
 17e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__fixunssfsi>
	const uint32_t off_time = PERIOD-on_time;
 182:	0f 2e       	mov	r0, r31
 184:	fc e2       	ldi	r31, 0x2C	; 44
 186:	cf 2e       	mov	r12, r31
 188:	dd 24       	eor	r13, r13
 18a:	d3 94       	inc	r13
 18c:	e1 2c       	mov	r14, r1
 18e:	f1 2c       	mov	r15, r1
 190:	f0 2d       	mov	r31, r0
 192:	c6 1a       	sub	r12, r22
 194:	d7 0a       	sbc	r13, r23
 196:	e8 0a       	sbc	r14, r24
 198:	f9 0a       	sbc	r15, r25
	
	SERVO_ON;
 19a:	2b b1       	in	r18, 0x0b	; 11
 19c:	20 64       	ori	r18, 0x40	; 64
 19e:	2b b9       	out	0x0b, r18	; 11
	delay(on_time);
 1a0:	0e 94 6f 00 	call	0xde	; 0xde <delay>
	SERVO_OFF;
 1a4:	8b b1       	in	r24, 0x0b	; 11
 1a6:	8f 7b       	andi	r24, 0xBF	; 191
 1a8:	8b b9       	out	0x0b, r24	; 11
	delay(off_time);
 1aa:	c7 01       	movw	r24, r14
 1ac:	b6 01       	movw	r22, r12
 1ae:	0e 94 6f 00 	call	0xde	; 0xde <delay>
	return;
}
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <__divsf3>:
 1bc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__divsf3x>
 1c0:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__fp_round>
 1c4:	0e 94 cc 01 	call	0x398	; 0x398 <__fp_pscB>
 1c8:	58 f0       	brcs	.+22     	; 0x1e0 <__divsf3+0x24>
 1ca:	0e 94 c5 01 	call	0x38a	; 0x38a <__fp_pscA>
 1ce:	40 f0       	brcs	.+16     	; 0x1e0 <__divsf3+0x24>
 1d0:	29 f4       	brne	.+10     	; 0x1dc <__divsf3+0x20>
 1d2:	5f 3f       	cpi	r21, 0xFF	; 255
 1d4:	29 f0       	breq	.+10     	; 0x1e0 <__divsf3+0x24>
 1d6:	0c 94 bc 01 	jmp	0x378	; 0x378 <__fp_inf>
 1da:	51 11       	cpse	r21, r1
 1dc:	0c 94 07 02 	jmp	0x40e	; 0x40e <__fp_szero>
 1e0:	0c 94 c2 01 	jmp	0x384	; 0x384 <__fp_nan>

000001e4 <__divsf3x>:
 1e4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__fp_split3>
 1e8:	68 f3       	brcs	.-38     	; 0x1c4 <__divsf3+0x8>

000001ea <__divsf3_pse>:
 1ea:	99 23       	and	r25, r25
 1ec:	b1 f3       	breq	.-20     	; 0x1da <__divsf3+0x1e>
 1ee:	55 23       	and	r21, r21
 1f0:	91 f3       	breq	.-28     	; 0x1d6 <__divsf3+0x1a>
 1f2:	95 1b       	sub	r25, r21
 1f4:	55 0b       	sbc	r21, r21
 1f6:	bb 27       	eor	r27, r27
 1f8:	aa 27       	eor	r26, r26
 1fa:	62 17       	cp	r22, r18
 1fc:	73 07       	cpc	r23, r19
 1fe:	84 07       	cpc	r24, r20
 200:	38 f0       	brcs	.+14     	; 0x210 <__divsf3_pse+0x26>
 202:	9f 5f       	subi	r25, 0xFF	; 255
 204:	5f 4f       	sbci	r21, 0xFF	; 255
 206:	22 0f       	add	r18, r18
 208:	33 1f       	adc	r19, r19
 20a:	44 1f       	adc	r20, r20
 20c:	aa 1f       	adc	r26, r26
 20e:	a9 f3       	breq	.-22     	; 0x1fa <__divsf3_pse+0x10>
 210:	35 d0       	rcall	.+106    	; 0x27c <__divsf3_pse+0x92>
 212:	0e 2e       	mov	r0, r30
 214:	3a f0       	brmi	.+14     	; 0x224 <__divsf3_pse+0x3a>
 216:	e0 e8       	ldi	r30, 0x80	; 128
 218:	32 d0       	rcall	.+100    	; 0x27e <__divsf3_pse+0x94>
 21a:	91 50       	subi	r25, 0x01	; 1
 21c:	50 40       	sbci	r21, 0x00	; 0
 21e:	e6 95       	lsr	r30
 220:	00 1c       	adc	r0, r0
 222:	ca f7       	brpl	.-14     	; 0x216 <__divsf3_pse+0x2c>
 224:	2b d0       	rcall	.+86     	; 0x27c <__divsf3_pse+0x92>
 226:	fe 2f       	mov	r31, r30
 228:	29 d0       	rcall	.+82     	; 0x27c <__divsf3_pse+0x92>
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	88 1f       	adc	r24, r24
 230:	bb 1f       	adc	r27, r27
 232:	26 17       	cp	r18, r22
 234:	37 07       	cpc	r19, r23
 236:	48 07       	cpc	r20, r24
 238:	ab 07       	cpc	r26, r27
 23a:	b0 e8       	ldi	r27, 0x80	; 128
 23c:	09 f0       	breq	.+2      	; 0x240 <__divsf3_pse+0x56>
 23e:	bb 0b       	sbc	r27, r27
 240:	80 2d       	mov	r24, r0
 242:	bf 01       	movw	r22, r30
 244:	ff 27       	eor	r31, r31
 246:	93 58       	subi	r25, 0x83	; 131
 248:	5f 4f       	sbci	r21, 0xFF	; 255
 24a:	3a f0       	brmi	.+14     	; 0x25a <__divsf3_pse+0x70>
 24c:	9e 3f       	cpi	r25, 0xFE	; 254
 24e:	51 05       	cpc	r21, r1
 250:	78 f0       	brcs	.+30     	; 0x270 <__divsf3_pse+0x86>
 252:	0c 94 bc 01 	jmp	0x378	; 0x378 <__fp_inf>
 256:	0c 94 07 02 	jmp	0x40e	; 0x40e <__fp_szero>
 25a:	5f 3f       	cpi	r21, 0xFF	; 255
 25c:	e4 f3       	brlt	.-8      	; 0x256 <__divsf3_pse+0x6c>
 25e:	98 3e       	cpi	r25, 0xE8	; 232
 260:	d4 f3       	brlt	.-12     	; 0x256 <__divsf3_pse+0x6c>
 262:	86 95       	lsr	r24
 264:	77 95       	ror	r23
 266:	67 95       	ror	r22
 268:	b7 95       	ror	r27
 26a:	f7 95       	ror	r31
 26c:	9f 5f       	subi	r25, 0xFF	; 255
 26e:	c9 f7       	brne	.-14     	; 0x262 <__divsf3_pse+0x78>
 270:	88 0f       	add	r24, r24
 272:	91 1d       	adc	r25, r1
 274:	96 95       	lsr	r25
 276:	87 95       	ror	r24
 278:	97 f9       	bld	r25, 7
 27a:	08 95       	ret
 27c:	e1 e0       	ldi	r30, 0x01	; 1
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	88 1f       	adc	r24, r24
 284:	bb 1f       	adc	r27, r27
 286:	62 17       	cp	r22, r18
 288:	73 07       	cpc	r23, r19
 28a:	84 07       	cpc	r24, r20
 28c:	ba 07       	cpc	r27, r26
 28e:	20 f0       	brcs	.+8      	; 0x298 <__divsf3_pse+0xae>
 290:	62 1b       	sub	r22, r18
 292:	73 0b       	sbc	r23, r19
 294:	84 0b       	sbc	r24, r20
 296:	ba 0b       	sbc	r27, r26
 298:	ee 1f       	adc	r30, r30
 29a:	88 f7       	brcc	.-30     	; 0x27e <__divsf3_pse+0x94>
 29c:	e0 95       	com	r30
 29e:	08 95       	ret

000002a0 <__fixunssfsi>:
 2a0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__fp_splitA>
 2a4:	88 f0       	brcs	.+34     	; 0x2c8 <__fixunssfsi+0x28>
 2a6:	9f 57       	subi	r25, 0x7F	; 127
 2a8:	98 f0       	brcs	.+38     	; 0x2d0 <__fixunssfsi+0x30>
 2aa:	b9 2f       	mov	r27, r25
 2ac:	99 27       	eor	r25, r25
 2ae:	b7 51       	subi	r27, 0x17	; 23
 2b0:	b0 f0       	brcs	.+44     	; 0x2de <__fixunssfsi+0x3e>
 2b2:	e1 f0       	breq	.+56     	; 0x2ec <__fixunssfsi+0x4c>
 2b4:	66 0f       	add	r22, r22
 2b6:	77 1f       	adc	r23, r23
 2b8:	88 1f       	adc	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	1a f0       	brmi	.+6      	; 0x2c4 <__fixunssfsi+0x24>
 2be:	ba 95       	dec	r27
 2c0:	c9 f7       	brne	.-14     	; 0x2b4 <__fixunssfsi+0x14>
 2c2:	14 c0       	rjmp	.+40     	; 0x2ec <__fixunssfsi+0x4c>
 2c4:	b1 30       	cpi	r27, 0x01	; 1
 2c6:	91 f0       	breq	.+36     	; 0x2ec <__fixunssfsi+0x4c>
 2c8:	0e 94 06 02 	call	0x40c	; 0x40c <__fp_zero>
 2cc:	b1 e0       	ldi	r27, 0x01	; 1
 2ce:	08 95       	ret
 2d0:	0c 94 06 02 	jmp	0x40c	; 0x40c <__fp_zero>
 2d4:	67 2f       	mov	r22, r23
 2d6:	78 2f       	mov	r23, r24
 2d8:	88 27       	eor	r24, r24
 2da:	b8 5f       	subi	r27, 0xF8	; 248
 2dc:	39 f0       	breq	.+14     	; 0x2ec <__fixunssfsi+0x4c>
 2de:	b9 3f       	cpi	r27, 0xF9	; 249
 2e0:	cc f3       	brlt	.-14     	; 0x2d4 <__fixunssfsi+0x34>
 2e2:	86 95       	lsr	r24
 2e4:	77 95       	ror	r23
 2e6:	67 95       	ror	r22
 2e8:	b3 95       	inc	r27
 2ea:	d9 f7       	brne	.-10     	; 0x2e2 <__fixunssfsi+0x42>
 2ec:	3e f4       	brtc	.+14     	; 0x2fc <__fixunssfsi+0x5c>
 2ee:	90 95       	com	r25
 2f0:	80 95       	com	r24
 2f2:	70 95       	com	r23
 2f4:	61 95       	neg	r22
 2f6:	7f 4f       	sbci	r23, 0xFF	; 255
 2f8:	8f 4f       	sbci	r24, 0xFF	; 255
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	08 95       	ret

000002fe <__floatunsisf>:
 2fe:	e8 94       	clt
 300:	09 c0       	rjmp	.+18     	; 0x314 <__floatsisf+0x12>

00000302 <__floatsisf>:
 302:	97 fb       	bst	r25, 7
 304:	3e f4       	brtc	.+14     	; 0x314 <__floatsisf+0x12>
 306:	90 95       	com	r25
 308:	80 95       	com	r24
 30a:	70 95       	com	r23
 30c:	61 95       	neg	r22
 30e:	7f 4f       	sbci	r23, 0xFF	; 255
 310:	8f 4f       	sbci	r24, 0xFF	; 255
 312:	9f 4f       	sbci	r25, 0xFF	; 255
 314:	99 23       	and	r25, r25
 316:	a9 f0       	breq	.+42     	; 0x342 <__floatsisf+0x40>
 318:	f9 2f       	mov	r31, r25
 31a:	96 e9       	ldi	r25, 0x96	; 150
 31c:	bb 27       	eor	r27, r27
 31e:	93 95       	inc	r25
 320:	f6 95       	lsr	r31
 322:	87 95       	ror	r24
 324:	77 95       	ror	r23
 326:	67 95       	ror	r22
 328:	b7 95       	ror	r27
 32a:	f1 11       	cpse	r31, r1
 32c:	f8 cf       	rjmp	.-16     	; 0x31e <__floatsisf+0x1c>
 32e:	fa f4       	brpl	.+62     	; 0x36e <__floatsisf+0x6c>
 330:	bb 0f       	add	r27, r27
 332:	11 f4       	brne	.+4      	; 0x338 <__floatsisf+0x36>
 334:	60 ff       	sbrs	r22, 0
 336:	1b c0       	rjmp	.+54     	; 0x36e <__floatsisf+0x6c>
 338:	6f 5f       	subi	r22, 0xFF	; 255
 33a:	7f 4f       	sbci	r23, 0xFF	; 255
 33c:	8f 4f       	sbci	r24, 0xFF	; 255
 33e:	9f 4f       	sbci	r25, 0xFF	; 255
 340:	16 c0       	rjmp	.+44     	; 0x36e <__floatsisf+0x6c>
 342:	88 23       	and	r24, r24
 344:	11 f0       	breq	.+4      	; 0x34a <__floatsisf+0x48>
 346:	96 e9       	ldi	r25, 0x96	; 150
 348:	11 c0       	rjmp	.+34     	; 0x36c <__floatsisf+0x6a>
 34a:	77 23       	and	r23, r23
 34c:	21 f0       	breq	.+8      	; 0x356 <__floatsisf+0x54>
 34e:	9e e8       	ldi	r25, 0x8E	; 142
 350:	87 2f       	mov	r24, r23
 352:	76 2f       	mov	r23, r22
 354:	05 c0       	rjmp	.+10     	; 0x360 <__floatsisf+0x5e>
 356:	66 23       	and	r22, r22
 358:	71 f0       	breq	.+28     	; 0x376 <__floatsisf+0x74>
 35a:	96 e8       	ldi	r25, 0x86	; 134
 35c:	86 2f       	mov	r24, r22
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	2a f0       	brmi	.+10     	; 0x36e <__floatsisf+0x6c>
 364:	9a 95       	dec	r25
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	88 1f       	adc	r24, r24
 36c:	da f7       	brpl	.-10     	; 0x364 <__floatsisf+0x62>
 36e:	88 0f       	add	r24, r24
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	97 f9       	bld	r25, 7
 376:	08 95       	ret

00000378 <__fp_inf>:
 378:	97 f9       	bld	r25, 7
 37a:	9f 67       	ori	r25, 0x7F	; 127
 37c:	80 e8       	ldi	r24, 0x80	; 128
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	08 95       	ret

00000384 <__fp_nan>:
 384:	9f ef       	ldi	r25, 0xFF	; 255
 386:	80 ec       	ldi	r24, 0xC0	; 192
 388:	08 95       	ret

0000038a <__fp_pscA>:
 38a:	00 24       	eor	r0, r0
 38c:	0a 94       	dec	r0
 38e:	16 16       	cp	r1, r22
 390:	17 06       	cpc	r1, r23
 392:	18 06       	cpc	r1, r24
 394:	09 06       	cpc	r0, r25
 396:	08 95       	ret

00000398 <__fp_pscB>:
 398:	00 24       	eor	r0, r0
 39a:	0a 94       	dec	r0
 39c:	12 16       	cp	r1, r18
 39e:	13 06       	cpc	r1, r19
 3a0:	14 06       	cpc	r1, r20
 3a2:	05 06       	cpc	r0, r21
 3a4:	08 95       	ret

000003a6 <__fp_round>:
 3a6:	09 2e       	mov	r0, r25
 3a8:	03 94       	inc	r0
 3aa:	00 0c       	add	r0, r0
 3ac:	11 f4       	brne	.+4      	; 0x3b2 <__fp_round+0xc>
 3ae:	88 23       	and	r24, r24
 3b0:	52 f0       	brmi	.+20     	; 0x3c6 <__fp_round+0x20>
 3b2:	bb 0f       	add	r27, r27
 3b4:	40 f4       	brcc	.+16     	; 0x3c6 <__fp_round+0x20>
 3b6:	bf 2b       	or	r27, r31
 3b8:	11 f4       	brne	.+4      	; 0x3be <__fp_round+0x18>
 3ba:	60 ff       	sbrs	r22, 0
 3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <__fp_round+0x20>
 3be:	6f 5f       	subi	r22, 0xFF	; 255
 3c0:	7f 4f       	sbci	r23, 0xFF	; 255
 3c2:	8f 4f       	sbci	r24, 0xFF	; 255
 3c4:	9f 4f       	sbci	r25, 0xFF	; 255
 3c6:	08 95       	ret

000003c8 <__fp_split3>:
 3c8:	57 fd       	sbrc	r21, 7
 3ca:	90 58       	subi	r25, 0x80	; 128
 3cc:	44 0f       	add	r20, r20
 3ce:	55 1f       	adc	r21, r21
 3d0:	59 f0       	breq	.+22     	; 0x3e8 <__fp_splitA+0x10>
 3d2:	5f 3f       	cpi	r21, 0xFF	; 255
 3d4:	71 f0       	breq	.+28     	; 0x3f2 <__fp_splitA+0x1a>
 3d6:	47 95       	ror	r20

000003d8 <__fp_splitA>:
 3d8:	88 0f       	add	r24, r24
 3da:	97 fb       	bst	r25, 7
 3dc:	99 1f       	adc	r25, r25
 3de:	61 f0       	breq	.+24     	; 0x3f8 <__fp_splitA+0x20>
 3e0:	9f 3f       	cpi	r25, 0xFF	; 255
 3e2:	79 f0       	breq	.+30     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3e4:	87 95       	ror	r24
 3e6:	08 95       	ret
 3e8:	12 16       	cp	r1, r18
 3ea:	13 06       	cpc	r1, r19
 3ec:	14 06       	cpc	r1, r20
 3ee:	55 1f       	adc	r21, r21
 3f0:	f2 cf       	rjmp	.-28     	; 0x3d6 <__fp_split3+0xe>
 3f2:	46 95       	lsr	r20
 3f4:	f1 df       	rcall	.-30     	; 0x3d8 <__fp_splitA>
 3f6:	08 c0       	rjmp	.+16     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3f8:	16 16       	cp	r1, r22
 3fa:	17 06       	cpc	r1, r23
 3fc:	18 06       	cpc	r1, r24
 3fe:	99 1f       	adc	r25, r25
 400:	f1 cf       	rjmp	.-30     	; 0x3e4 <__fp_splitA+0xc>
 402:	86 95       	lsr	r24
 404:	71 05       	cpc	r23, r1
 406:	61 05       	cpc	r22, r1
 408:	08 94       	sec
 40a:	08 95       	ret

0000040c <__fp_zero>:
 40c:	e8 94       	clt

0000040e <__fp_szero>:
 40e:	bb 27       	eor	r27, r27
 410:	66 27       	eor	r22, r22
 412:	77 27       	eor	r23, r23
 414:	cb 01       	movw	r24, r22
 416:	97 f9       	bld	r25, 7
 418:	08 95       	ret

0000041a <__mulsf3>:
 41a:	0e 94 20 02 	call	0x440	; 0x440 <__mulsf3x>
 41e:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__fp_round>
 422:	0e 94 c5 01 	call	0x38a	; 0x38a <__fp_pscA>
 426:	38 f0       	brcs	.+14     	; 0x436 <__mulsf3+0x1c>
 428:	0e 94 cc 01 	call	0x398	; 0x398 <__fp_pscB>
 42c:	20 f0       	brcs	.+8      	; 0x436 <__mulsf3+0x1c>
 42e:	95 23       	and	r25, r21
 430:	11 f0       	breq	.+4      	; 0x436 <__mulsf3+0x1c>
 432:	0c 94 bc 01 	jmp	0x378	; 0x378 <__fp_inf>
 436:	0c 94 c2 01 	jmp	0x384	; 0x384 <__fp_nan>
 43a:	11 24       	eor	r1, r1
 43c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__fp_szero>

00000440 <__mulsf3x>:
 440:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__fp_split3>
 444:	70 f3       	brcs	.-36     	; 0x422 <__mulsf3+0x8>

00000446 <__mulsf3_pse>:
 446:	95 9f       	mul	r25, r21
 448:	c1 f3       	breq	.-16     	; 0x43a <__mulsf3+0x20>
 44a:	95 0f       	add	r25, r21
 44c:	50 e0       	ldi	r21, 0x00	; 0
 44e:	55 1f       	adc	r21, r21
 450:	62 9f       	mul	r22, r18
 452:	f0 01       	movw	r30, r0
 454:	72 9f       	mul	r23, r18
 456:	bb 27       	eor	r27, r27
 458:	f0 0d       	add	r31, r0
 45a:	b1 1d       	adc	r27, r1
 45c:	63 9f       	mul	r22, r19
 45e:	aa 27       	eor	r26, r26
 460:	f0 0d       	add	r31, r0
 462:	b1 1d       	adc	r27, r1
 464:	aa 1f       	adc	r26, r26
 466:	64 9f       	mul	r22, r20
 468:	66 27       	eor	r22, r22
 46a:	b0 0d       	add	r27, r0
 46c:	a1 1d       	adc	r26, r1
 46e:	66 1f       	adc	r22, r22
 470:	82 9f       	mul	r24, r18
 472:	22 27       	eor	r18, r18
 474:	b0 0d       	add	r27, r0
 476:	a1 1d       	adc	r26, r1
 478:	62 1f       	adc	r22, r18
 47a:	73 9f       	mul	r23, r19
 47c:	b0 0d       	add	r27, r0
 47e:	a1 1d       	adc	r26, r1
 480:	62 1f       	adc	r22, r18
 482:	83 9f       	mul	r24, r19
 484:	a0 0d       	add	r26, r0
 486:	61 1d       	adc	r22, r1
 488:	22 1f       	adc	r18, r18
 48a:	74 9f       	mul	r23, r20
 48c:	33 27       	eor	r19, r19
 48e:	a0 0d       	add	r26, r0
 490:	61 1d       	adc	r22, r1
 492:	23 1f       	adc	r18, r19
 494:	84 9f       	mul	r24, r20
 496:	60 0d       	add	r22, r0
 498:	21 1d       	adc	r18, r1
 49a:	82 2f       	mov	r24, r18
 49c:	76 2f       	mov	r23, r22
 49e:	6a 2f       	mov	r22, r26
 4a0:	11 24       	eor	r1, r1
 4a2:	9f 57       	subi	r25, 0x7F	; 127
 4a4:	50 40       	sbci	r21, 0x00	; 0
 4a6:	9a f0       	brmi	.+38     	; 0x4ce <__mulsf3_pse+0x88>
 4a8:	f1 f0       	breq	.+60     	; 0x4e6 <__mulsf3_pse+0xa0>
 4aa:	88 23       	and	r24, r24
 4ac:	4a f0       	brmi	.+18     	; 0x4c0 <__mulsf3_pse+0x7a>
 4ae:	ee 0f       	add	r30, r30
 4b0:	ff 1f       	adc	r31, r31
 4b2:	bb 1f       	adc	r27, r27
 4b4:	66 1f       	adc	r22, r22
 4b6:	77 1f       	adc	r23, r23
 4b8:	88 1f       	adc	r24, r24
 4ba:	91 50       	subi	r25, 0x01	; 1
 4bc:	50 40       	sbci	r21, 0x00	; 0
 4be:	a9 f7       	brne	.-22     	; 0x4aa <__mulsf3_pse+0x64>
 4c0:	9e 3f       	cpi	r25, 0xFE	; 254
 4c2:	51 05       	cpc	r21, r1
 4c4:	80 f0       	brcs	.+32     	; 0x4e6 <__mulsf3_pse+0xa0>
 4c6:	0c 94 bc 01 	jmp	0x378	; 0x378 <__fp_inf>
 4ca:	0c 94 07 02 	jmp	0x40e	; 0x40e <__fp_szero>
 4ce:	5f 3f       	cpi	r21, 0xFF	; 255
 4d0:	e4 f3       	brlt	.-8      	; 0x4ca <__mulsf3_pse+0x84>
 4d2:	98 3e       	cpi	r25, 0xE8	; 232
 4d4:	d4 f3       	brlt	.-12     	; 0x4ca <__mulsf3_pse+0x84>
 4d6:	86 95       	lsr	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b7 95       	ror	r27
 4de:	f7 95       	ror	r31
 4e0:	e7 95       	ror	r30
 4e2:	9f 5f       	subi	r25, 0xFF	; 255
 4e4:	c1 f7       	brne	.-16     	; 0x4d6 <__mulsf3_pse+0x90>
 4e6:	fe 2b       	or	r31, r30
 4e8:	88 0f       	add	r24, r24
 4ea:	91 1d       	adc	r25, r1
 4ec:	96 95       	lsr	r25
 4ee:	87 95       	ror	r24
 4f0:	97 f9       	bld	r25, 7
 4f2:	08 95       	ret

000004f4 <_exit>:
 4f4:	f8 94       	cli

000004f6 <__stop_program>:
 4f6:	ff cf       	rjmp	.-2      	; 0x4f6 <__stop_program>
