
test kod sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000947  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fe  00000000  00000000  00000e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000375  00000000  00000000  00001631  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000019a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043b  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e8  00000000  00000000  00001e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001f5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
	#include "header.h"

	int main(void)
	{
		Setup();
  90:	0e 94 8a 00 	call	0x114	; 0x114 <Setup>
		//float f = 37.7777777;
		while (true) //Skapar en while sats so ska exekverar tills att programmet stängs av.
		{
			PWM(); //I while satsen så anropas PWM funktionen.
  94:	0e 94 8f 00 	call	0x11e	; 0x11e <PWM>
  98:	fd cf       	rjmp	.-6      	; 0x94 <main+0x4>

0000009a <ADC_read>:
	return;
}

static uint32_t ADC_read()
{
	ADMUX = ((1 << REFS0) | POT);
  9a:	81 e4       	ldi	r24, 0x41	; 65
  9c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = ((1 << ADEN) | (1 << ADSC) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
  a0:	87 ec       	ldi	r24, 0xC7	; 199
  a2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	while ((ADCSRA & (1 << ADIF)) == 0) ;
  a6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  aa:	84 ff       	sbrs	r24, 4
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <ADC_read+0xc>
	ADCSRA = (1 << ADIF);
  ae:	80 e1       	ldi	r24, 0x10	; 16
  b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	return ADC;
  b4:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  b8:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
}
  c0:	08 95       	ret

000000c2 <init_ADC>:
	return;
}

static void init_ADC()
{
	ADMUX = (1 << REFS0);
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = ((1 << ADEN) | (1 << ADSC) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
  c8:	87 ec       	ldi	r24, 0xC7	; 199
  ca:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	while ((ADCSRA & (1 << ADIF)) == 0) ;
  ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d2:	84 ff       	sbrs	r24, 4
  d4:	fc cf       	rjmp	.-8      	; 0xce <init_ADC+0xc>
	ADCSRA = (1 << ADIF);
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  dc:	08 95       	ret

000000de <delay>:
	ADCSRA = (1 << ADIF);
	return ADC;
}

static void delay(const uint32_t delay_time)
{
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	8b 01       	movw	r16, r22
  e4:	9c 01       	movw	r18, r24
	for (int i = 0; i < delay_time; i++)
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	07 c0       	rjmp	.+14     	; 0xfa <delay+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	e7 e8       	ldi	r30, 0x87	; 135
  ee:	f3 e1       	ldi	r31, 0x13	; 19
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <delay+0x12>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <delay+0x18>
  f6:	00 00       	nop
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	ac 01       	movw	r20, r24
  fc:	09 2e       	mov	r0, r25
  fe:	00 0c       	add	r0, r0
 100:	66 0b       	sbc	r22, r22
 102:	77 0b       	sbc	r23, r23
 104:	40 17       	cp	r20, r16
 106:	51 07       	cpc	r21, r17
 108:	62 07       	cpc	r22, r18
 10a:	73 07       	cpc	r23, r19
 10c:	78 f3       	brcs	.-34     	; 0xec <delay+0xe>
	_delay_ms(1);
	return;
}
 10e:	1f 91       	pop	r17
 110:	0f 91       	pop	r16
 112:	08 95       	ret

00000114 <Setup>:
static void delay(const uint32_t delay_time);
static void init_ADC();

void Setup()
{
	DDRD = (1 << SERVO);
 114:	80 e4       	ldi	r24, 0x40	; 64
 116:	8a b9       	out	0x0a, r24	; 10
	init_ADC();
 118:	0e 94 61 00 	call	0xc2	; 0xc2 <init_ADC>
 11c:	08 95       	ret

0000011e <PWM>:
}

void PWM()
{
	const uint16_t speed = ADC_read(POT);
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 4d 00 	call	0x9a	; 0x9a <ADC_read>
	const float duty_cycle = (float)speed / (ADC_MAX);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__floatunsisf>
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	40 e8       	ldi	r20, 0x80	; 128
 134:	5a e3       	ldi	r21, 0x3A	; 58
 136:	0e 94 4c 01 	call	0x298	; 0x298 <__mulsf3>
	const float on_time = (uint8_t )(duty_cycle * 3.000);
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	40 e4       	ldi	r20, 0x40	; 64
 140:	50 e4       	ldi	r21, 0x40	; 64
 142:	0e 94 4c 01 	call	0x298	; 0x298 <__mulsf3>
 146:	0e 94 b7 00 	call	0x16e	; 0x16e <__fixunssfsi>
	const uint8_t off_time = 5; 
	SERVO_ON;
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	8b b9       	out	0x0b, r24	; 11
	delay(on_time);
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 6f 00 	call	0xde	; 0xde <delay>
	SERVO_OFF;
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	8f 7b       	andi	r24, 0xBF	; 191
 15e:	8b b9       	out	0x0b, r24	; 11
	delay(off_time);
 160:	65 e0       	ldi	r22, 0x05	; 5
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 6f 00 	call	0xde	; 0xde <delay>
 16c:	08 95       	ret

0000016e <__fixunssfsi>:
 16e:	0e 94 2b 01 	call	0x256	; 0x256 <__fp_splitA>
 172:	88 f0       	brcs	.+34     	; 0x196 <__fixunssfsi+0x28>
 174:	9f 57       	subi	r25, 0x7F	; 127
 176:	98 f0       	brcs	.+38     	; 0x19e <__fixunssfsi+0x30>
 178:	b9 2f       	mov	r27, r25
 17a:	99 27       	eor	r25, r25
 17c:	b7 51       	subi	r27, 0x17	; 23
 17e:	b0 f0       	brcs	.+44     	; 0x1ac <__fixunssfsi+0x3e>
 180:	e1 f0       	breq	.+56     	; 0x1ba <__fixunssfsi+0x4c>
 182:	66 0f       	add	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	88 1f       	adc	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	1a f0       	brmi	.+6      	; 0x192 <__fixunssfsi+0x24>
 18c:	ba 95       	dec	r27
 18e:	c9 f7       	brne	.-14     	; 0x182 <__fixunssfsi+0x14>
 190:	14 c0       	rjmp	.+40     	; 0x1ba <__fixunssfsi+0x4c>
 192:	b1 30       	cpi	r27, 0x01	; 1
 194:	91 f0       	breq	.+36     	; 0x1ba <__fixunssfsi+0x4c>
 196:	0e 94 45 01 	call	0x28a	; 0x28a <__fp_zero>
 19a:	b1 e0       	ldi	r27, 0x01	; 1
 19c:	08 95       	ret
 19e:	0c 94 45 01 	jmp	0x28a	; 0x28a <__fp_zero>
 1a2:	67 2f       	mov	r22, r23
 1a4:	78 2f       	mov	r23, r24
 1a6:	88 27       	eor	r24, r24
 1a8:	b8 5f       	subi	r27, 0xF8	; 248
 1aa:	39 f0       	breq	.+14     	; 0x1ba <__fixunssfsi+0x4c>
 1ac:	b9 3f       	cpi	r27, 0xF9	; 249
 1ae:	cc f3       	brlt	.-14     	; 0x1a2 <__fixunssfsi+0x34>
 1b0:	86 95       	lsr	r24
 1b2:	77 95       	ror	r23
 1b4:	67 95       	ror	r22
 1b6:	b3 95       	inc	r27
 1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__fixunssfsi+0x42>
 1ba:	3e f4       	brtc	.+14     	; 0x1ca <__fixunssfsi+0x5c>
 1bc:	90 95       	com	r25
 1be:	80 95       	com	r24
 1c0:	70 95       	com	r23
 1c2:	61 95       	neg	r22
 1c4:	7f 4f       	sbci	r23, 0xFF	; 255
 1c6:	8f 4f       	sbci	r24, 0xFF	; 255
 1c8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ca:	08 95       	ret

000001cc <__floatunsisf>:
 1cc:	e8 94       	clt
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <__floatsisf+0x12>

000001d0 <__floatsisf>:
 1d0:	97 fb       	bst	r25, 7
 1d2:	3e f4       	brtc	.+14     	; 0x1e2 <__floatsisf+0x12>
 1d4:	90 95       	com	r25
 1d6:	80 95       	com	r24
 1d8:	70 95       	com	r23
 1da:	61 95       	neg	r22
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255
 1de:	8f 4f       	sbci	r24, 0xFF	; 255
 1e0:	9f 4f       	sbci	r25, 0xFF	; 255
 1e2:	99 23       	and	r25, r25
 1e4:	a9 f0       	breq	.+42     	; 0x210 <__floatsisf+0x40>
 1e6:	f9 2f       	mov	r31, r25
 1e8:	96 e9       	ldi	r25, 0x96	; 150
 1ea:	bb 27       	eor	r27, r27
 1ec:	93 95       	inc	r25
 1ee:	f6 95       	lsr	r31
 1f0:	87 95       	ror	r24
 1f2:	77 95       	ror	r23
 1f4:	67 95       	ror	r22
 1f6:	b7 95       	ror	r27
 1f8:	f1 11       	cpse	r31, r1
 1fa:	f8 cf       	rjmp	.-16     	; 0x1ec <__floatsisf+0x1c>
 1fc:	fa f4       	brpl	.+62     	; 0x23c <__floatsisf+0x6c>
 1fe:	bb 0f       	add	r27, r27
 200:	11 f4       	brne	.+4      	; 0x206 <__floatsisf+0x36>
 202:	60 ff       	sbrs	r22, 0
 204:	1b c0       	rjmp	.+54     	; 0x23c <__floatsisf+0x6c>
 206:	6f 5f       	subi	r22, 0xFF	; 255
 208:	7f 4f       	sbci	r23, 0xFF	; 255
 20a:	8f 4f       	sbci	r24, 0xFF	; 255
 20c:	9f 4f       	sbci	r25, 0xFF	; 255
 20e:	16 c0       	rjmp	.+44     	; 0x23c <__floatsisf+0x6c>
 210:	88 23       	and	r24, r24
 212:	11 f0       	breq	.+4      	; 0x218 <__floatsisf+0x48>
 214:	96 e9       	ldi	r25, 0x96	; 150
 216:	11 c0       	rjmp	.+34     	; 0x23a <__floatsisf+0x6a>
 218:	77 23       	and	r23, r23
 21a:	21 f0       	breq	.+8      	; 0x224 <__floatsisf+0x54>
 21c:	9e e8       	ldi	r25, 0x8E	; 142
 21e:	87 2f       	mov	r24, r23
 220:	76 2f       	mov	r23, r22
 222:	05 c0       	rjmp	.+10     	; 0x22e <__floatsisf+0x5e>
 224:	66 23       	and	r22, r22
 226:	71 f0       	breq	.+28     	; 0x244 <__floatsisf+0x74>
 228:	96 e8       	ldi	r25, 0x86	; 134
 22a:	86 2f       	mov	r24, r22
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	2a f0       	brmi	.+10     	; 0x23c <__floatsisf+0x6c>
 232:	9a 95       	dec	r25
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	88 1f       	adc	r24, r24
 23a:	da f7       	brpl	.-10     	; 0x232 <__floatsisf+0x62>
 23c:	88 0f       	add	r24, r24
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	97 f9       	bld	r25, 7
 244:	08 95       	ret

00000246 <__fp_split3>:
 246:	57 fd       	sbrc	r21, 7
 248:	90 58       	subi	r25, 0x80	; 128
 24a:	44 0f       	add	r20, r20
 24c:	55 1f       	adc	r21, r21
 24e:	59 f0       	breq	.+22     	; 0x266 <__fp_splitA+0x10>
 250:	5f 3f       	cpi	r21, 0xFF	; 255
 252:	71 f0       	breq	.+28     	; 0x270 <__fp_splitA+0x1a>
 254:	47 95       	ror	r20

00000256 <__fp_splitA>:
 256:	88 0f       	add	r24, r24
 258:	97 fb       	bst	r25, 7
 25a:	99 1f       	adc	r25, r25
 25c:	61 f0       	breq	.+24     	; 0x276 <__fp_splitA+0x20>
 25e:	9f 3f       	cpi	r25, 0xFF	; 255
 260:	79 f0       	breq	.+30     	; 0x280 <__fp_splitA+0x2a>
 262:	87 95       	ror	r24
 264:	08 95       	ret
 266:	12 16       	cp	r1, r18
 268:	13 06       	cpc	r1, r19
 26a:	14 06       	cpc	r1, r20
 26c:	55 1f       	adc	r21, r21
 26e:	f2 cf       	rjmp	.-28     	; 0x254 <__fp_split3+0xe>
 270:	46 95       	lsr	r20
 272:	f1 df       	rcall	.-30     	; 0x256 <__fp_splitA>
 274:	08 c0       	rjmp	.+16     	; 0x286 <__fp_splitA+0x30>
 276:	16 16       	cp	r1, r22
 278:	17 06       	cpc	r1, r23
 27a:	18 06       	cpc	r1, r24
 27c:	99 1f       	adc	r25, r25
 27e:	f1 cf       	rjmp	.-30     	; 0x262 <__fp_splitA+0xc>
 280:	86 95       	lsr	r24
 282:	71 05       	cpc	r23, r1
 284:	61 05       	cpc	r22, r1
 286:	08 94       	sec
 288:	08 95       	ret

0000028a <__fp_zero>:
 28a:	e8 94       	clt

0000028c <__fp_szero>:
 28c:	bb 27       	eor	r27, r27
 28e:	66 27       	eor	r22, r22
 290:	77 27       	eor	r23, r23
 292:	cb 01       	movw	r24, r22
 294:	97 f9       	bld	r25, 7
 296:	08 95       	ret

00000298 <__mulsf3>:
 298:	0e 94 5f 01 	call	0x2be	; 0x2be <__mulsf3x>
 29c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__fp_round>
 2a0:	0e 94 c2 01 	call	0x384	; 0x384 <__fp_pscA>
 2a4:	38 f0       	brcs	.+14     	; 0x2b4 <__mulsf3+0x1c>
 2a6:	0e 94 c9 01 	call	0x392	; 0x392 <__fp_pscB>
 2aa:	20 f0       	brcs	.+8      	; 0x2b4 <__mulsf3+0x1c>
 2ac:	95 23       	and	r25, r21
 2ae:	11 f0       	breq	.+4      	; 0x2b4 <__mulsf3+0x1c>
 2b0:	0c 94 b9 01 	jmp	0x372	; 0x372 <__fp_inf>
 2b4:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__fp_nan>
 2b8:	11 24       	eor	r1, r1
 2ba:	0c 94 46 01 	jmp	0x28c	; 0x28c <__fp_szero>

000002be <__mulsf3x>:
 2be:	0e 94 23 01 	call	0x246	; 0x246 <__fp_split3>
 2c2:	70 f3       	brcs	.-36     	; 0x2a0 <__mulsf3+0x8>

000002c4 <__mulsf3_pse>:
 2c4:	95 9f       	mul	r25, r21
 2c6:	c1 f3       	breq	.-16     	; 0x2b8 <__mulsf3+0x20>
 2c8:	95 0f       	add	r25, r21
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	55 1f       	adc	r21, r21
 2ce:	62 9f       	mul	r22, r18
 2d0:	f0 01       	movw	r30, r0
 2d2:	72 9f       	mul	r23, r18
 2d4:	bb 27       	eor	r27, r27
 2d6:	f0 0d       	add	r31, r0
 2d8:	b1 1d       	adc	r27, r1
 2da:	63 9f       	mul	r22, r19
 2dc:	aa 27       	eor	r26, r26
 2de:	f0 0d       	add	r31, r0
 2e0:	b1 1d       	adc	r27, r1
 2e2:	aa 1f       	adc	r26, r26
 2e4:	64 9f       	mul	r22, r20
 2e6:	66 27       	eor	r22, r22
 2e8:	b0 0d       	add	r27, r0
 2ea:	a1 1d       	adc	r26, r1
 2ec:	66 1f       	adc	r22, r22
 2ee:	82 9f       	mul	r24, r18
 2f0:	22 27       	eor	r18, r18
 2f2:	b0 0d       	add	r27, r0
 2f4:	a1 1d       	adc	r26, r1
 2f6:	62 1f       	adc	r22, r18
 2f8:	73 9f       	mul	r23, r19
 2fa:	b0 0d       	add	r27, r0
 2fc:	a1 1d       	adc	r26, r1
 2fe:	62 1f       	adc	r22, r18
 300:	83 9f       	mul	r24, r19
 302:	a0 0d       	add	r26, r0
 304:	61 1d       	adc	r22, r1
 306:	22 1f       	adc	r18, r18
 308:	74 9f       	mul	r23, r20
 30a:	33 27       	eor	r19, r19
 30c:	a0 0d       	add	r26, r0
 30e:	61 1d       	adc	r22, r1
 310:	23 1f       	adc	r18, r19
 312:	84 9f       	mul	r24, r20
 314:	60 0d       	add	r22, r0
 316:	21 1d       	adc	r18, r1
 318:	82 2f       	mov	r24, r18
 31a:	76 2f       	mov	r23, r22
 31c:	6a 2f       	mov	r22, r26
 31e:	11 24       	eor	r1, r1
 320:	9f 57       	subi	r25, 0x7F	; 127
 322:	50 40       	sbci	r21, 0x00	; 0
 324:	9a f0       	brmi	.+38     	; 0x34c <__mulsf3_pse+0x88>
 326:	f1 f0       	breq	.+60     	; 0x364 <__mulsf3_pse+0xa0>
 328:	88 23       	and	r24, r24
 32a:	4a f0       	brmi	.+18     	; 0x33e <__mulsf3_pse+0x7a>
 32c:	ee 0f       	add	r30, r30
 32e:	ff 1f       	adc	r31, r31
 330:	bb 1f       	adc	r27, r27
 332:	66 1f       	adc	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	88 1f       	adc	r24, r24
 338:	91 50       	subi	r25, 0x01	; 1
 33a:	50 40       	sbci	r21, 0x00	; 0
 33c:	a9 f7       	brne	.-22     	; 0x328 <__mulsf3_pse+0x64>
 33e:	9e 3f       	cpi	r25, 0xFE	; 254
 340:	51 05       	cpc	r21, r1
 342:	80 f0       	brcs	.+32     	; 0x364 <__mulsf3_pse+0xa0>
 344:	0c 94 b9 01 	jmp	0x372	; 0x372 <__fp_inf>
 348:	0c 94 46 01 	jmp	0x28c	; 0x28c <__fp_szero>
 34c:	5f 3f       	cpi	r21, 0xFF	; 255
 34e:	e4 f3       	brlt	.-8      	; 0x348 <__mulsf3_pse+0x84>
 350:	98 3e       	cpi	r25, 0xE8	; 232
 352:	d4 f3       	brlt	.-12     	; 0x348 <__mulsf3_pse+0x84>
 354:	86 95       	lsr	r24
 356:	77 95       	ror	r23
 358:	67 95       	ror	r22
 35a:	b7 95       	ror	r27
 35c:	f7 95       	ror	r31
 35e:	e7 95       	ror	r30
 360:	9f 5f       	subi	r25, 0xFF	; 255
 362:	c1 f7       	brne	.-16     	; 0x354 <__mulsf3_pse+0x90>
 364:	fe 2b       	or	r31, r30
 366:	88 0f       	add	r24, r24
 368:	91 1d       	adc	r25, r1
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	97 f9       	bld	r25, 7
 370:	08 95       	ret

00000372 <__fp_inf>:
 372:	97 f9       	bld	r25, 7
 374:	9f 67       	ori	r25, 0x7F	; 127
 376:	80 e8       	ldi	r24, 0x80	; 128
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	08 95       	ret

0000037e <__fp_nan>:
 37e:	9f ef       	ldi	r25, 0xFF	; 255
 380:	80 ec       	ldi	r24, 0xC0	; 192
 382:	08 95       	ret

00000384 <__fp_pscA>:
 384:	00 24       	eor	r0, r0
 386:	0a 94       	dec	r0
 388:	16 16       	cp	r1, r22
 38a:	17 06       	cpc	r1, r23
 38c:	18 06       	cpc	r1, r24
 38e:	09 06       	cpc	r0, r25
 390:	08 95       	ret

00000392 <__fp_pscB>:
 392:	00 24       	eor	r0, r0
 394:	0a 94       	dec	r0
 396:	12 16       	cp	r1, r18
 398:	13 06       	cpc	r1, r19
 39a:	14 06       	cpc	r1, r20
 39c:	05 06       	cpc	r0, r21
 39e:	08 95       	ret

000003a0 <__fp_round>:
 3a0:	09 2e       	mov	r0, r25
 3a2:	03 94       	inc	r0
 3a4:	00 0c       	add	r0, r0
 3a6:	11 f4       	brne	.+4      	; 0x3ac <__fp_round+0xc>
 3a8:	88 23       	and	r24, r24
 3aa:	52 f0       	brmi	.+20     	; 0x3c0 <__fp_round+0x20>
 3ac:	bb 0f       	add	r27, r27
 3ae:	40 f4       	brcc	.+16     	; 0x3c0 <__fp_round+0x20>
 3b0:	bf 2b       	or	r27, r31
 3b2:	11 f4       	brne	.+4      	; 0x3b8 <__fp_round+0x18>
 3b4:	60 ff       	sbrs	r22, 0
 3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <__fp_round+0x20>
 3b8:	6f 5f       	subi	r22, 0xFF	; 255
 3ba:	7f 4f       	sbci	r23, 0xFF	; 255
 3bc:	8f 4f       	sbci	r24, 0xFF	; 255
 3be:	9f 4f       	sbci	r25, 0xFF	; 255
 3c0:	08 95       	ret

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
